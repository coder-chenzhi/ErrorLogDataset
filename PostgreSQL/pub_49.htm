<!DOCTYPE html><html><head><title>[pgsql] 5084</title><link rel="shortcut icon" href="https://ssl.gstatic.com/docs/documents/images/kix-favicon6.ico"><style type="text/css" nonce="xLpsEwFiOnMTIehWwqUE18pn8Cg">
      body {
        font-family: arial, sans, sans-serif;
        margin: 0;
      }

      iframe {
        border: 0;
        frameborder: 0;
        height: 100%;
        width: 100%;
      }

      #header, #footer {
        background: #f0f0f0;
        padding: 10px 10px;
      }

      #header {
        border-bottom: 1px #ccc solid;
      }

      #footer {
        border-top: 1px #ccc solid;
        border-bottom: 1px #ccc solid;
        font-size: 13;
      }

      #contents {
        margin: 6px;
      }

      .dash {
        padding: 0 6px;
      }
    </style></head><body><div id="header">[pgsql] 5084</div><div id="contents"><style type="text/css">@import url('https://themes.googleusercontent.com/fonts/css?kit=wAPX1HepqA24RkYW1AuHYA');ol{margin:0;padding:0}table td,table th{padding:0}.c28{-webkit-text-decoration-skip:none;color:#000099;font-weight:400;text-decoration:underline;vertical-align:baseline;text-decoration-skip-ink:none;font-family:"Arial";font-style:normal}.c34{color:#ff0000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:13pt;font-family:"Arial";font-style:normal}.c1{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:13pt;font-family:"Arial";font-style:normal}.c4{color:#0000ff;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:13pt;font-family:"Arial";font-style:normal}.c9{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:14pt;font-family:"Arial";font-style:normal}.c6{color:#00ff00;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c10{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c20{color:#ff0000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c31{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:13pt;font-family:"Verdana";font-style:normal}.c17{color:#ff0000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:13pt;font-family:"Arial";font-style:normal}.c13{color:#ff9900;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:13pt;font-family:"Arial";font-style:normal}.c3{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:12pt;font-family:"Arial";font-style:normal}.c16{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c2{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c8{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-family:"Courier New";font-style:normal}.c29{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-family:"Courier New";font-style:normal}.c22{color:#0000ff;font-weight:400;text-decoration:none;vertical-align:baseline;font-family:"Arial";font-style:normal}.c32{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-family:"Arial";font-style:normal}.c7{color:#0000ff;font-weight:400;text-decoration:none;vertical-align:baseline;font-family:"Courier New";font-style:normal}.c21{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c26{color:#ff0000;font-weight:400;text-decoration:none;vertical-align:baseline;font-family:"Courier New";font-style:normal}.c25{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-family:"Calibri";font-style:normal}.c11{color:#00ff00;font-weight:400;text-decoration:none;vertical-align:baseline;font-family:"Courier New";font-style:normal}.c35{color:#0000ff;font-weight:700;text-decoration:none;vertical-align:baseline;font-family:"Courier New";font-style:normal}.c23{color:#ff0000;font-weight:700;text-decoration:none;vertical-align:baseline;font-family:"Courier New";font-style:normal}.c18{color:#00ff00;font-weight:700;text-decoration:none;vertical-align:baseline;font-family:"Courier New";font-style:normal}.c0{padding-top:0pt;padding-bottom:0pt;line-height:1.15;text-align:left}.c15{padding-top:0pt;padding-bottom:0pt;line-height:1.15;text-align:center}.c38{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c27{font-size:14pt;font-weight:700}.c30{color:inherit;text-decoration:inherit}.c19{background-color:#ffe599}.c36{font-size:13pt}.c37{margin-left:36pt}.c33{text-indent:36pt}.c12{background-color:#ff0000}.c5{height:11pt}.c24{font-size:11pt}.c14{font-size:12pt}.title{padding-top:24pt;color:#000000;font-weight:700;font-size:36pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:18pt;color:#666666;font-size:24pt;padding-bottom:4pt;font-family:"Georgia";line-height:1.15;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:24pt;color:#000000;font-weight:700;font-size:24pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-weight:700;font-size:18pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:14pt;color:#000000;font-weight:700;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:12pt;color:#000000;font-weight:700;font-size:12pt;padding-bottom:2pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:11pt;color:#000000;font-weight:700;font-size:11pt;padding-bottom:2pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:10pt;color:#000000;font-weight:700;font-size:10pt;padding-bottom:2pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}</style><p class="c15"><span class="c9">pgsql-5084</span></p><p class="c0"><span class="c9">Version:</span></p><p class="c0"><span class="c14 c32">8.3.7</span></p><p class="c0 c5"><span class="c32 c14"></span></p><p class="c0"><span class="c9">Bug Link:</span></p><p class="c0"><span class="c28 c24"><a class="c30" href="https://www.google.com/url?q=http://www.google.com/url?q%3Dhttp%253A%252F%252Fpostgresql.1045698.n5.nabble.com%252FBUG-5084-Query-gives-different-number-of-rows-depending-on-ORDER-BY-td2131558.html%26sa%3DD%26sntz%3D1%26usg%3DAFQjCNFN_lVOOYsFKXXwPKN-4-9Tss4MJw&amp;sa=D&amp;ust=1534664704895000">http://postgresql.1045698.n5.nabble.com/BUG-5084-Query-gives-different-number-of-rows-depending-on-ORDER-BY-td2131558.html</a></span></p><p class="c0 c5"><span class="c28 c24"><a class="c30" href="https://www.google.com/url?q=http://www.google.com/url?q%3Dhttp%253A%252F%252Fpostgresql.1045698.n5.nabble.com%252FBUG-5196-Excessive-memory-consumption-when-using-csvlog-td2130188.html%26sa%3DD%26sntz%3D1%26usg%3DAFQjCNGVM12PZ8xsxeKnqTPg_mmYl17G2g&amp;sa=D&amp;ust=1534664704896000"></a></span></p><p class="c0"><span class="c9">Symptom:</span></p><p class="c0"><span class="c10">Query with `where X=X’ clause gives different result (number of rows) depending on whether there is an ‘ORDER BY’.</span></p><p class="c0 c5"><span class="c31"></span></p><p class="c0"><span class="c9">How it is diagnosed:</span></p><p class="c0"><span class="c10">Reproduced!</span></p><p class="c0 c5"><span class="c10"></span></p><p class="c0"><span class="c9">How to reproduce:</span></p><p class="c0 c5"><span class="c9"></span></p><p class="c0"><span class="c1">------ buggy result: -----------</span></p><p class="c0"><span class="c1">postgres=# select * from (values (1),(null)) v(k) where k = k </span><span class="c4">order by k</span><span class="c1">;</span></p><p class="c0"><span class="c13"> k </span></p><p class="c0"><span class="c13">---</span></p><p class="c0"><span class="c13"> 1</span></p><p class="c0"><span class="c13">  </span></p><p class="c0"><span class="c17">(2 rows) -- the second row above was a NULL.</span></p><p class="c0"><span class="c14 c22">The expression ‘(VALUES (1),(NULL)) v(k)’ is to create a single column table named ‘v’ and column name ‘k’ (both ‘v’ and ‘k’ are aliases). There are two rows from the table, with the value 1 and NULL. </span></p><p class="c0 c5"><span class="c1"></span></p><p class="c0"><span class="c1">------ correct result: -----------</span></p><p class="c0"><span class="c1">postgres=# select * from (values (1),(null)) v(k) where k = k;           </span></p><p class="c0"><span class="c13"> k </span></p><p class="c0"><span class="c13">---</span></p><p class="c0"><span class="c13"> 1</span></p><p class="c0"><span class="c17">(1 row) // without order by there’s one row</span></p><p class="c0 c5"><span class="c17"></span></p><p class="c0"><span class="c1">There is an inconsistency between the above two results (number of rows). According to the specification of postgres, the 2nd one is correct, that a single NULL result should be filtered. </span></p><p class="c0 c5"><span class="c1 c12"></span></p><p class="c0"><span class="c1">Next we show the query plan, which further explains the failure:</span></p><p class="c0"><span class="c1">------ buggy result: -----------</span></p><p class="c0"><span class="c1">postgres=# explain select * from (values (1),(null)) v(k) where k = k order by k; </span></p><p class="c0"><span class="c13">                            QUERY PLAN                             </span></p><p class="c0"><span class="c13">------------------------------------------------------------------- </span></p><p class="c0"><span class="c13"> Sort  (cost=0.04..0.04 rows=2 width=4) </span></p><p class="c0"><span class="c13">   Sort Key: &quot;*VALUES*&quot;.column1 </span></p><p class="c0"><span class="c13">   -&gt;  Values Scan on &quot;*VALUES*&quot;  (cost=0.00..0.03 rows=2 width=4) </span></p><p class="c0"><span class="c13">(3 rows) </span></p><p class="c0 c5"><span class="c1"></span></p><p class="c0"><span class="c1">------ correct result: -----------</span></p><p class="c0"><span class="c1">postgres=# explain select * from (values (1),(null)) v(k) where k = k; </span></p><p class="c0"><span class="c13">                         QUERY PLAN                           </span></p><p class="c0"><span class="c13">------------------------------------------------------------- </span></p><p class="c0"><span class="c13"> Values Scan on &quot;*VALUES*&quot;  (cost=0.00..0.03 rows=1 width=4) </span></p><p class="c0"><span class="c1">  </span><span class="c17"> Filter: (column1 = column1)  </span></p><p class="c0"><span class="c17">   </span><span class="c4">// we can see that this filter is dropped in the query plan above</span></p><p class="c0"><span class="c13">(2 rows)</span></p><p class="c0 c5"><span class="c10"></span></p><p class="c0"><span class="c3">So from the query plan we can see, in the incorrect execution (with ‘order by’), postgres did not apply any filter: (column1 = column1). Actually, this filter is the key to filter out the NULL results.</span></p><p class="c0 c5"><span class="c10"></span></p><p class="c0"><span class="c9">Root Cause:</span></p><p class="c0"><span class="c3">It is caused by premature optimization.The filter that checks the ‘WHERE’ constraint will filter out the NULL result. But this filter was not used in the buggy version due to a premature optimization -- when postgres detects the ‘WHERE’ clause is in the form of (column1 = column1), it will skip any filtering process.</span></p><p class="c0 c5"><span class="c3"></span></p><p class="c0"><span class="c3">Detail:</span></p><p class="c0"><span class="c2">static void distribute_qual_to_rels(...) {</span></p><p class="c0"><span class="c2">  ...</span></p><p class="c0"><span class="c2">  if (maybe_equivalence) {</span></p><p class="c0"><span class="c8">    </span><span class="c20">/* Here, it’s an optimization call ‘process_equivalence’. The function tries to </span></p><p class="c0"><span class="c20">      * return true, causing ‘distribute_qual_to_rels’ to return without</span></p><p class="c0"><span class="c20">      * calling ‘distribute_restrictinfo_to_rels’ below. ‘distribute_restrictinfo_to_rels’</span></p><p class="c0"><span class="c20">      * is to actually use the WHERE clause to filter the result. In the buggy execution,</span></p><p class="c0"><span class="c20">      * process_equivalence returned true because it sees the WHERE clause was x=x, </span></p><p class="c0"><span class="c23">      * thinking there is no need to enforce it. */</span></p><p class="c0"><span class="c8">      if (</span><span class="c18">process_equivalence</span><span class="c2">(root, restrictinfo, below_outer_join))</span></p><p class="c0"><span class="c2">                        return;</span></p><p class="c0"><span class="c8">      </span><span class="c23">/* EC rejected it, so pass to distribute_restrictinfo_to_rels */</span></p><p class="c0"><span class="c2">     }</span></p><p class="c0"><span class="c2">        …</span></p><p class="c0"><span class="c2">     /* No EC special case applies, so push it into the clause lists */</span></p><p class="c0"><span class="c8">   </span><span class="c7 c24">  /* distribute_restrictinfo_to_rels is to strictly enforce the WHERE clause. </span></p><p class="c0"><span class="c7">       * In our case ‘WHERE x=x’, This is essentially unoptimized handling of equality */</span></p><p class="c0"><span class="c2">    distribute_restrictinfo_to_rels(root, restrictinfo);</span></p><p class="c0"><span class="c8">}</span></p><p class="c0 c5"><span class="c2"></span></p><p class="c0"><span class="c8">bool </span><span class="c18">process_equivalence</span><span class="c2">(PlannerInfo *root, RestrictInfo *restrictinfo, bool below_outer_join) {</span></p><p class="c0"><span class="c2">            … …</span></p><p class="c0"><span class="c8">    </span><span class="c7 c24">       /* The patch logic: if the WHERE clause is X=X, then we should return false, meaning</span></p><p class="c0"><span class="c7 c24">            * we cannot do any optimization, and force postgres to call </span></p><p class="c0"><span class="c7">            * distribute_restrictinfo_to_rels to use the WHERE clause filtering the result. */</span><span class="c8"><br>          /*<br>+          * Reject clauses of the form X=X.  These are not as redundant as they<br>+          * might seem at first glance: assuming the operator is strict, this is<br>+          * really an expensive way to write X IS NOT NULL.  So we must not risk<br>+          * just losing the clause, which would be possible if there is already<br>+          * a single-element EquivalenceClass containing X.  The case is not<br>+          * common enough to be worth contorting the EC machinery for, so just<br>+          * reject the clause and let it be processed as a normal restriction<br>+          * clause.<br>+          */</span><span class="c26"><br>+         if (equal(item1, item2))<br>+                 return false;                        /* X=X is not a useful equivalence */<br>+</span></p><p class="c0 c33"><span class="c2">…</span></p><p class="c0 c33"><span class="c7 c24">/* Various optimization cases so that postgres does not need to really forcing the</span></p><p class="c0 c33"><span class="c7"> * WHERE clause to filter result....*/</span></p><p class="c0"><span class="c2">            … ...</span></p><p class="c0"><span class="c2">        if (ec1 &amp;&amp; ec2)</span></p><p class="c0"><span class="c2">        {</span></p><p class="c0"><span class="c2">                /* If case 1, nothing to do, except add to sources */</span></p><p class="c0"><span class="c8">                </span><span class="c20">//The “with order by” query falls into this if! It thinks because</span></p><p class="c0"><span class="c20">                       // ec1 == ec2 (x=x), we can optimize!!! While it is hard to anticipate</span></p><p class="c0"><span class="c23">                        // the bug, they should log here just in case this is wrong!</span></p><p class="c0"><span class="c2">                if (ec1 == ec2) </span></p><p class="c0"><span class="c2">                {</span></p><p class="c0"><span class="c2">                        ec1-&gt;ec_sources = lappend(ec1-&gt;ec_sources, restrictinfo);</span></p><p class="c0"><span class="c2">                        ec1-&gt;ec_below_outer_join |= below_outer_join;</span></p><p class="c0"><span class="c2">                        /* mark the RI as usable with this pair of EMs */</span></p><p class="c0"><span class="c2">                        /* NB: can&#39;t set left_ec/right_ec until merging is finished */</span></p><p class="c0"><span class="c2">                        restrictinfo-&gt;left_em = em1;</span></p><p class="c0"><span class="c2">                        restrictinfo-&gt;right_em = em2;</span></p><p class="c0"><span class="c2">                        return true;</span></p><p class="c0"><span class="c2">                }</span></p><p class="c0 c5"><span class="c2"></span></p><p class="c0"><span class="c2">                /*</span></p><p class="c0"><span class="c2">                 * Case 2: need to merge ec1 and ec2.</span></p><p class="c0"><span class="c2">                 */</span></p><p class="c0"><span class="c2">                ...</span></p><p class="c0 c5"><span class="c2"></span></p><p class="c0"><span class="c2">        }</span></p><p class="c0"><span class="c2">}</span></p><p class="c0 c5"><span class="c25 c14"></span></p><p class="c0"><span class="c25 c14">For the test case without ‘order by’, the postgres’ logic was eventually still executing distribute_restrictinfo_to_rels to enforce the WHERE filter. </span></p><p class="c0 c5"><span class="c3"></span></p><p class="c0"><span class="c9">Failure type:</span></p><p class="c0"><span class="c25 c14">Wrong result</span></p><p class="c0 c5"><span class="c14 c25"></span></p><p class="c0"><span class="c9">Is there any log message?</span></p><p class="c0"><span class="c10">No</span></p><p class="c0 c5"><span class="c10"></span></p><p class="c0"><span class="c9">Can </span><span class="c27">ErrLog insert a log message</span><span class="c9">?</span></p><p class="c0"><span class="c14">No. </span><span>The i</span><span class="c21">nformation sufficient to diagnose the failure:</span><span> </span><span class="c14">w</span><span class="c3">ithin process_equivalence, ec1 == ec2 (same as item1 == item2). It</span><span class="c14">’s desirable to log at</span></p><p class="c0"><span class="c2 c12">if (list_length(ec-&gt;ec_members) &lt;= 1) </span></p><p class="c0"><span class="c2 c12">                        continue;</span></p><p class="c0"><span class="c36">, w</span><span class="c1">hich is the diverting point between “with order by” and “without order by”</span><span>. But there’s not generic pattern for this. </span></p><p class="c0 c5"><span class="c3"></span></p><p class="c0"><span class="c27">Additional Elaboration:</span></p><p class="c0"><span class="c3">The WHERE clause will result in a filter in postgres, which is to check whether it satisfies the WHERE constraint. It will also check each value against NULL thus will discard those NULL results. </span></p><p class="c0 c5"><span class="c3"></span></p><p class="c0"><span class="c14">A</span><span class="c3">nd this</span><span class="c14"> </span><span class="c3">filter (column1 = column1) is to be applied on each row, which is to check whether it satisfies the WHERE constraint. It will also check each value against NULL thus will discard those NULL results. However, if there is ‘ORDER BY’, postgres will build a data structure ‘EquivalenceClass’ to sort on the ORDER BY column. However, when building this data structure, it applied an optimization, that it identified ‘column1 = column1’ is unnecessary, thus completely discard the checking against this constraint. This works fine in most cases, but when the return result is a single NULL, it will not be checked against any constraint at all before returning to users.</span></p><p class="c0 c5"><span class="c3"></span></p><p class="c0"><span class="c3">In function process_equivalence(equivclass.c), </span></p><p class="c0 c5"><span class="c10 c12"></span></p><p class="c0 c5"><span class="c10"></span></p><p class="c0"><span class="c10">1. Without ORDER BY, process_equivalence generates an equivalence class </span></p><p class="c0"><span class="c10">that lists k twice.  This is pretty bogus but it happens to produce the </span></p><p class="c0"><span class="c10">desired results in the example at hand.  (In some other cases you&#39;ll get </span></p><p class="c0"><span class="c10">redundant clauses out, because the eclass machinery isn&#39;t expecting </span></p><p class="c0"><span class="c10">this.) </span></p><p class="c0 c5"><span class="c10"></span></p><p class="c0"><span class="c10">2. With ORDER BY k, the code first creates a single-element equivalence </span></p><p class="c0"><span class="c10">class containing k, because it needs that to represent the desired </span></p><p class="c0"><span class="c10">pathkey.  Then, process_equivalence finds that both sides of the k = k </span></p><p class="c0"><span class="c10">clause are already known to be in the same eclass, so it concludes that </span></p><p class="c0"><span class="c10">this is redundant information. </span></p><p class="c0 c5"><span class="c31"></span></p><p class="c0"><span class="c3"><br>The original coding correctly noted that these aren&#39;t just redundancies<br>(they&#39;re effectively X IS NOT NULL, assuming = is strict).  However, they got treated that way if X happened to be in a single-member EquivalenceClass already, which could happen if there was an ORDER BY X clause, for instance.<br>The simplest and most reliable solution seems to be to not try to process such clauses through the EquivalenceClass machinery; just throw them back for traditional processing. </span></p><p class="c0 c5"><span class="c2"></span></p><p class="c0 c5"><span class="c2"></span></p><p class="c0"><span class="c2">bool</span></p><p class="c0"><span class="c18">process_equivalence</span><span class="c2">(PlannerInfo *root, RestrictInfo *restrictinfo,</span></p><p class="c0"><span class="c2">                                        bool below_outer_join)</span></p><p class="c0"><span class="c2">{</span></p><p class="c0"><span class="c2">        Expr           *clause = restrictinfo-&gt;clause;</span></p><p class="c0"><span class="c2">        Oid            opno,item1_type,item2_type;</span></p><p class="c0"><span class="c2">        Expr           *item1;</span></p><p class="c0"><span class="c2">        Expr           *item2;</span></p><p class="c0"><span class="c2">        Relids           item1_relids,item2_relids;</span></p><p class="c0"><span class="c2">        List           *opfamilies;</span></p><p class="c0"><span class="c2">        EquivalenceClass *ec1,*ec2;</span></p><p class="c0"><span class="c2">        EquivalenceMember *em1, *em2;</span></p><p class="c0"><span class="c2">        ListCell   *lc1;</span></p><p class="c0"><span class="c2">        /* Extract info from given clause */</span></p><p class="c0"><span class="c2">        Assert(is_opclause(clause));</span></p><p class="c0"><span class="c2">        opno = ((OpExpr *) clause)-&gt;opno;</span></p><p class="c0"><span class="c2">        item1 = (Expr *) get_leftop(clause);</span></p><p class="c0"><span class="c2">        item2 = (Expr *) get_rightop(clause);</span></p><p class="c0"><span class="c2">        item1_relids = restrictinfo-&gt;left_relids;</span></p><p class="c0"><span class="c8">        item2_relids = restrictinfo-&gt;right_relids;<br></span><span class="c7">          /*<br>+          * Reject clauses of the form X=X.  These are not as redundant as they<br>+          * might seem at first glance: assuming the operator is strict, this is<br>+          * really an expensive way to write X IS NOT NULL.  So we must not risk<br>+          * just losing the clause, which would be possible if there is already<br>+          * a single-element EquivalenceClass containing X.  The case is not<br>+          * common enough to be worth contorting the EC machinery for, so just<br>+          * reject the clause and let it be processed as a normal restriction<br>+          * clause.<br>+          */</span><span class="c26"><br>+         if (equal(item1, item2))<br>+                 return false;                        /* X=X is not a useful equivalence */<br>+</span></p><p class="c0 c33"><span class="c8">...</span></p><p class="c0"><span class="c2">        /*</span></p><p class="c0"><span class="c2">         * Sweep through the existing EquivalenceClasses looking for matches to</span></p><p class="c0"><span class="c2">         * item1 and item2.  These are the possible outcomes:</span></p><p class="c0"><span class="c2">         *</span></p><p class="c0"><span class="c2 c12">         * 1. We find both in the same EC.        The equivalence is already known, so</span></p><p class="c0"><span class="c8 c12">         * there&#39;s nothing to do. </span></p><p class="c0"><span class="c2">         *</span></p><p class="c0"><span class="c2">         * 2. We find both in different ECs.  Merge the two ECs together.</span></p><p class="c0"><span class="c2">         *</span></p><p class="c0"><span class="c2">         * 3. We find just one.  Add the other to its EC.</span></p><p class="c0"><span class="c2">         *</span></p><p class="c0"><span class="c2">         * 4. We find neither.        Make a new, two-entry EC.</span></p><p class="c0"><span class="c2">         *</span></p><p class="c0"><span class="c2">         * Note: since all ECs are built through this process, it&#39;s impossible</span></p><p class="c0"><span class="c8">         * that we&#39;d match an item in more than one existing EC. </span><span class="c6"> It is possible</span></p><p class="c0"><span class="c6">         * to match more than once within an EC, if someone fed us something silly</span></p><p class="c0"><span class="c6">         * like &quot;WHERE X=X&quot;.  (However, we can&#39;t simply discard such clauses,</span></p><p class="c0"><span class="c6">         * since they should fail when X is null; so we will build a 2-member EC</span></p><p class="c0"><span class="c6">         * to ensure the correct restriction clause gets generated.  Hence there</span></p><p class="c0"><span class="c11">         * is no shortcut here for item1 and item2 equal.) </span><span class="c7">?</span></p><p class="c0"><span class="c2">         */</span></p><p class="c0"><span class="c2">        ec1 = ec2 = NULL;</span></p><p class="c0"><span class="c2">        em1 = em2 = NULL;</span></p><p class="c0"><span class="c2">        foreach(lc1, root-&gt;eq_classes)</span></p><p class="c0"><span class="c2">        {</span></p><p class="c0"><span class="c2">                ...</span></p><p class="c0"><span class="c2">        }</span></p><p class="c0"><span class="c2">        /* Sweep finished, what did we find? */</span></p><p class="c0 c5"><span class="c2"></span></p><p class="c0"><span class="c2">        if (ec1 &amp;&amp; ec2)</span></p><p class="c0"><span class="c2">        {</span></p><p class="c0"><span class="c2">                /* If case 1, nothing to do, except add to sources */</span></p><p class="c0"><span class="c8">                if (ec1 == ec2) </span><span class="c35 c24">//The “with order by” query falls into this if!</span></p><p class="c0"><span class="c35">                </span><span class="c20">//fix me: </span></p><p class="c0 c33 c37"><span class="c20">//If we think this case is also an optimization, can we discard this</span></p><p class="c0"><span class="c23">                //and let it go to the case 2?</span></p><p class="c0"><span class="c2">                {</span></p><p class="c0"><span class="c2">                        ec1-&gt;ec_sources = lappend(ec1-&gt;ec_sources, restrictinfo);</span></p><p class="c0"><span class="c2">                        ec1-&gt;ec_below_outer_join |= below_outer_join;</span></p><p class="c0"><span class="c2">                        /* mark the RI as usable with this pair of EMs */</span></p><p class="c0"><span class="c2">                        /* NB: can&#39;t set left_ec/right_ec until merging is finished */</span></p><p class="c0"><span class="c2">                        restrictinfo-&gt;left_em = em1;</span></p><p class="c0"><span class="c2">                        restrictinfo-&gt;right_em = em2;</span></p><p class="c0"><span class="c2">                        return true;</span></p><p class="c0"><span class="c2">                }</span></p><p class="c0 c5"><span class="c2"></span></p><p class="c0"><span class="c2">                /*</span></p><p class="c0"><span class="c2">                 * Case 2: need to merge ec1 and ec2.</span></p><p class="c0"><span class="c2">                 */</span></p><p class="c0"><span class="c2">                ...</span></p><p class="c0 c5"><span class="c2"></span></p><p class="c0"><span class="c2">        }</span></p><p class="c0"><span class="c2">        else if (ec1)</span></p><p class="c0"><span class="c2">        {</span></p><p class="c0"><span class="c2">                /* Case 3: add item2 to ec1 */</span></p><p class="c0"><span class="c2">                ...</span></p><p class="c0"><span class="c2">        }</span></p><p class="c0"><span class="c2">        else if (ec2)</span></p><p class="c0"><span class="c2">        {</span></p><p class="c0"><span class="c2">                /* Case 3: add item1 to ec2 */</span></p><p class="c0"><span class="c2">                ...</span></p><p class="c0"><span class="c2">        }</span></p><p class="c0"><span class="c2">        else</span></p><p class="c0"><span class="c8">        {  </span><span class="c35">// The “without order by” query falls into this if!</span></p><p class="c0"><span class="c2">                /* Case 4: make a new, two-entry EC */</span></p><p class="c0"><span class="c2">                EquivalenceClass *ec = makeNode(EquivalenceClass);</span></p><p class="c0 c5"><span class="c2"></span></p><p class="c0"><span class="c2">                ec-&gt;ec_opfamilies = opfamilies;</span></p><p class="c0"><span class="c2">                ec-&gt;ec_members = NIL;</span></p><p class="c0"><span class="c2">                ec-&gt;ec_sources = list_make1(restrictinfo);</span></p><p class="c0"><span class="c2">                ec-&gt;ec_derives = NIL;</span></p><p class="c0"><span class="c2">                ec-&gt;ec_relids = NULL;</span></p><p class="c0"><span class="c2">                ec-&gt;ec_has_const = false;</span></p><p class="c0"><span class="c2">                ec-&gt;ec_has_volatile = false;</span></p><p class="c0"><span class="c2">                ec-&gt;ec_below_outer_join = below_outer_join;</span></p><p class="c0"><span class="c2">                ec-&gt;ec_broken = false;</span></p><p class="c0"><span class="c2">                ec-&gt;ec_sortref = 0;</span></p><p class="c0"><span class="c2">                ec-&gt;ec_merged = NULL;</span></p><p class="c0"><span class="c2">                em1 = add_eq_member(ec, item1, item1_relids, false, item1_type);</span></p><p class="c0"><span class="c2">                em2 = add_eq_member(ec, item2, item2_relids, false, item2_type);</span></p><p class="c0 c5"><span class="c2"></span></p><p class="c0"><span class="c2">                root-&gt;eq_classes = lappend(root-&gt;eq_classes, ec);</span></p><p class="c0 c5"><span class="c2"></span></p><p class="c0"><span class="c2">                /* mark the RI as usable with this pair of EMs */</span></p><p class="c0"><span class="c2">                restrictinfo-&gt;left_em = em1;</span></p><p class="c0"><span class="c2">                restrictinfo-&gt;right_em = em2;</span></p><p class="c0"><span class="c2">        }</span></p><p class="c0"><span class="c8">        return true;</span></p><p class="c0"><span class="c2">}</span></p><p class="c0 c5"><span class="c2"></span></p><p class="c0 c5"><span class="c2"></span></p><p class="c0"><span class="c18">As for the two different cases in process_equivalence between “with order by” and “without order by”, they divert when they keep on to the following code:</span></p><p class="c0"><span class="c12 c16">/*Ding: where is this generate_base_implied_equalities called from ?*/</span></p><p class="c0"><span class="c8">void </span><span class="c29">generate_base_implied_equalities</span><span class="c2">(PlannerInfo *root)</span></p><p class="c0"><span class="c2">{</span></p><p class="c0"><span class="c2">        ListCell   *lc;</span></p><p class="c0"><span class="c2">        Index                rti;</span></p><p class="c0"><span class="c2">        foreach(lc, root-&gt;eq_classes)</span></p><p class="c0"><span class="c2">        {</span></p><p class="c0"><span class="c2">                EquivalenceClass *ec = (EquivalenceClass *) lfirst(lc);</span></p><p class="c0"><span class="c2">                Assert(ec-&gt;ec_merged == NULL);        /* else shouldn&#39;t be in list */</span></p><p class="c0"><span class="c2">                Assert(!ec-&gt;ec_broken); /* not yet anyway... */</span></p><p class="c0"><span class="c35 c24">                /* Single-member ECs won&#39;t generate any deductions */</span></p><p class="c0"><span class="c35">                /*This is exactly the case for the “with order by” query!*/</span></p><p class="c0"><span class="c8">                </span><span class="c2 c12">if (list_length(ec-&gt;ec_members) &lt;= 1) </span></p><p class="c0"><span class="c8 c12">                        continue;</span></p><p class="c0"><span class="c2">                if (ec-&gt;ec_has_const)</span></p><p class="c0"><span class="c2">                        generate_base_implied_equalities_const(root, ec);</span></p><p class="c0"><span class="c8">                else </span><span class="c35">/*The“without order by” query will fall here*/</span></p><p class="c0"><span class="c8">                        </span><span class="c29 c12">generate_base_implied_equalities_no_const</span><span class="c8 c12">(root, ec);</span></p><p class="c0 c5"><span class="c2"></span></p><p class="c0"><span class="c2">                /* Recover if we failed to generate required derived clauses */</span></p><p class="c0"><span class="c2">                if (ec-&gt;ec_broken)</span></p><p class="c0"><span class="c2">                        generate_base_implied_equalities_broken(root, ec);</span></p><p class="c0"><span class="c2">        }</span></p><p class="c0"><span class="c2">}</span></p><p class="c0"><span class="c32 c19 c36">generate_base_implied_equalities_no_const</span></p><p class="c0"><span class="c1 c19">will also eventually call </span><span class="c19 c34">distribute_restrictinfo_to_rels,</span><span class="c1 c19"> remember the patch’s execution, that’s why the patch now behaves like the “without order by”!</span></p><p class="c0 c5"><span class="c1"></span></p><p class="c0 c5"><span class="c10"></span></p><p class="c0 c5"><span class="c10"></span></p></div><div id="footer"><span>Published by <a target="_blank" title="Learn more about Google Drive" href="//docs.google.com/">Google Drive</a></span><span class="dash">&ndash;</span><a href="//docs.google.com/abuse?id=1MV2ahkbl_nTcDVXYzUqoYVaAeVp0t2Q6cPH8h5uvBiw">Report Abuse</a><span class="dash">&ndash;</span><span>Updated automatically every 5 minutes</span></div><script type="text/javascript" nonce="xLpsEwFiOnMTIehWwqUE18pn8Cg">(function(){var k="undefined"!=typeof window&&window===this?this:"undefined"!=typeof global&&null!=global?global:this,aa="function"==typeof Object.create?Object.create:function(a){function b(){}b.prototype=a;return new b},ba;if("function"==typeof Object.setPrototypeOf)ba=Object.setPrototypeOf;else{var ca;a:{var da={o:!0},ea={};try{ea.__proto__=da;ca=ea.o;break a}catch(a){}ca=!1}ba=ca?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+" is not extensible");return a}:null}var fa=ba;
function m(a,b){a.prototype=aa(b.prototype);a.prototype.constructor=a;if(fa)fa(a,b);else for(var c in b)if("prototype"!=c)if(Object.defineProperties){var d=Object.getOwnPropertyDescriptor(b,c);d&&Object.defineProperty(a,c,d)}else a[c]=b[c];a.j=b.prototype}var ha="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};function ia(){ia=function(){};k.Symbol||(k.Symbol=ja)}
var ja=function(){var a=0;return function(b){return"jscomp_symbol_"+(b||"")+a++}}();function n(){ia();var a=k.Symbol.iterator;a||(a=k.Symbol.iterator=k.Symbol("iterator"));"function"!=typeof Array.prototype[a]&&ha(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return ka(this)}});n=function(){}}function ka(a){var b=0;return la(function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}})}function la(a){n();a={next:a};a[k.Symbol.iterator]=function(){return this};return a}
function ma(a){if(a){for(var b=k,c=["WeakMap"],d=0;d<c.length-1;d++){var e=c[d];e in b||(b[e]={});b=b[e]}c=c[c.length-1];d=b[c];a=a(d);a!=d&&null!=a&&ha(b,c,{configurable:!0,writable:!0,value:a})}}function p(a,b){return Object.prototype.hasOwnProperty.call(a,b)}
ma(function(a){function b(a){this.a=(f+=Math.random()+1).toString();if(a){ia();n();n();var b=a[Symbol.iterator];for(a=b?b.call(a):ka(a);!(b=a.next()).done;)b=b.value,this.set(b[0],b[1])}}function c(a){p(a,e)||ha(a,e,{value:{}})}function d(a){var b=Object[a];b&&(Object[a]=function(a){c(a);return b(a)})}if(function(){if(!a||!Object.seal)return!1;try{var b=Object.seal({}),c=Object.seal({}),d=new a([[b,2],[c,3]]);if(2!=d.get(b)||3!=d.get(c))return!1;d.delete(b);d.set(c,4);return!d.has(b)&&4==d.get(c)}catch(r){return!1}}())return a;
var e="$jscomp_hidden_"+Math.random();d("freeze");d("preventExtensions");d("seal");var f=0;b.prototype.set=function(a,b){c(a);if(!p(a,e))throw Error("WeakMap key fail: "+a);a[e][this.a]=b;return this};b.prototype.get=function(a){return p(a,e)?a[e][this.a]:void 0};b.prototype.has=function(a){return p(a,e)&&p(a[e],this.a)};b.prototype.delete=function(a){return p(a,e)&&p(a[e],this.a)?delete a[e][this.a]:!1};return b});var q=this;function na(){}
function t(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
else if("function"==b&&"undefined"==typeof a.call)return"object";return b}function oa(a){var b=typeof a;return"object"==b&&null!=a||"function"==b}function pa(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}
function qa(a,b){function c(){}c.prototype=b.prototype;a.j=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.v=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};function ra(a){ra[" "](a);return a}ra[" "]=na;function sa(a,b,c){return Object.prototype.hasOwnProperty.call(a,b)?a[b]:a[b]=c(b)};function ta(a){return sa(a.prototype,"$$generatedClassName",function(){return"Class$obf_"+{valueOf:function(){return++ua}}})}var ua=1E3;function u(){}u.prototype.g=function(){return va(this)};u.prototype.toString=function(){return v(w(y(this.constructor)))+"@"+v((this.g()>>>0).toString(16))};function z(){this.a=!1}m(z,u);z.prototype.f=function(a){return Error(a)};function wa(a,b){a.b=b;if(null!=b)try{b.__java$exception=a}catch(c){}}function xa(a){if(a.a&&"__noinit__"!==a.b){var b=null==a.c?null:a.c.replace(/\n/g,"\u200b\n");b=ya(a,b);b=a.f(b);if(!("stack"in b))try{throw b;}catch(c){}wa(a,b)}}z.prototype.toString=function(){return ya(this,this.c)};function ya(a,b){a=w(y(a.constructor));return null==b?a:v(a)+": "+v(b)};function za(){this.a=!1}m(za,z);function Aa(){this.a=!1}m(Aa,za);function va(a){return a.l||(Object.defineProperties(a,{l:{value:++Ba,enumerable:!1}}),a.l)}var Ba=0;function Ca(){this.a=!1}m(Ca,Aa);function Da(){this.a=!1}m(Da,Ca);Da.prototype.f=function(a){return new TypeError(a)};function Ea(a,b){return"string"==typeof a?a.charCodeAt(b):a.B(b)};function v(a){if(null==a)a="null";else if(a instanceof Array){var b=a.u;a=w(b?y(b.A,b.w):y(u,1))+"@"+(va(a)>>>0).toString(16)}else a=a.toString();return a}function Fa(a){if(65536<=a){var b=56320+(a-65536&1023)&65535;return v(String.fromCharCode(55296+(a-65536>>10&1023)&65535))+v(String.fromCharCode(b))}return String.fromCharCode(a&65535)}
function Ga(a,b){var c=b,d=a.length;b=Ea(a,c++);var e;if(d=55296<=b&&56319>=b&&c<d)a=e=Ea(a,c),d=56320<=a&&57343>=a;var f;d?f=65536+((b&1023)<<10)+(e&1023):f=b;return f}function Ha(a,b){return a===b||null==a&&null==b};function Ia(a,b){this.b=a;this.a=b}m(Ia,u);function w(a){var b=ta(a.b);0!=a.a&&(b="L"+v(b)+";");a=a.a;for(var c="",d=0;d<a;d++)c=v(c)+"[";return v(c)+v(b)}Ia.prototype.toString=function(){return"class "+v(w(this))};function y(a,b){var c=b||0;return sa(a.prototype,"$$class/"+c,function(){return new Ia(a,c)})};function Ja(a,b){return null==a?a:b?decodeURI(a):decodeURIComponent(a)};var Ka=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\S\s]*))?$/;function La(a){a=Ka.exec(a);for(var b=[],c=0;7>=c;c++)a.length<=c||null==a[c]?b.push(null):b.push(a[c]);return b}
function Ma(a,b){var c=Fa(35);c=a.indexOf(c);c=0>c?a.length:c;a:{var d=0;for(var e=b.length;0<(d=a.indexOf(b,d))&&d<c;){var f=Ga(a,d-1);if(38==f||63==f){if(d+e>=a.length)break a;f=Ga(a,d+e);if(61==f||38==f||35==f)break a}d+=e+1}d=-1}if(0>d)return null;e=d;f=Fa(38);e=a.indexOf(f,e);if(0>e||e>c)e=c;d+=b.length+1;b=Math.min(a.length,d);a=a.substr(b,Math.min(a.length,Math.max(d,e))-b);c=" ";for(b=0;0<=(b=c.indexOf("\\",b));)36==c.charCodeAt(b+1)?(d=v(c.substr(0,b))+"$",e=++b,c=d+v(c.substr(e))):(d=v(c.substr(0,
b)),e=++b,c=d+v(c.substr(e)));a=a.replace(/\+/g,c);return Ja(a,!1)};var Na=String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]},Oa=/&/g,Pa=/</g,Qa=/>/g,Ra=/"/g,Sa=/'/g,Ta=/\x00/g,Ua=/[\x00&<>"']/;function Va(a,b){return a<b?-1:a>b?1:0};var Wa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if("string"==typeof a)return"string"==typeof b&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};function A(a,b){this.a=[];this.b=b;for(var c=!0,d=a.length-1;0<=d;d--){var e=a[d]|0;c&&e==b||(this.a[d]=e,c=!1)}}var Xa={};function B(a){if(-128<=a&&128>a){var b=Xa[a];if(b)return b}b=new A([a|0],0>a?-1:0);-128<=a&&128>a&&(Xa[a]=b);return b}function C(a){if(isNaN(a)||!isFinite(a))return D;if(0>a)return E(C(-a));for(var b=[],c=1,d=0;a>=c;d++)b[d]=a/c|0,c*=4294967296;return new A(b,0)}var D=B(0),F=B(1),Ya=B(16777216);
function G(a){if(-1==a.b)return-G(E(a));for(var b=0,c=1,d=0;d<a.a.length;d++){var e=H(a,d);b+=(0<=e?e:4294967296+e)*c;c*=4294967296}return b}A.prototype.toString=function(a){a=a||10;if(2>a||36<a)throw Error("radix out of range: "+a);if(I(this))return"0";if(-1==this.b)return"-"+E(this).toString(a);for(var b=C(Math.pow(a,6)),c=this,d="";;){var e=Za(c,b);c=J(c,K(e,b));var f=((0<c.a.length?c.a[0]:c.b)>>>0).toString(a);c=e;if(I(c))return f+d;for(;6>f.length;)f="0"+f;d=f+d}};
function H(a,b){return 0>b?0:b<a.a.length?a.a[b]:a.b}function I(a){if(0!=a.b)return!1;for(var b=0;b<a.a.length;b++)if(0!=a.a[b])return!1;return!0}function L(a,b){a=J(a,b);return-1==a.b?-1:I(a)?0:1}function E(a){for(var b=a.a.length,c=[],d=0;d<b;d++)c[d]=~a.a[d];return(new A(c,~a.b)).add(F)}
A.prototype.add=function(a){for(var b=Math.max(this.a.length,a.a.length),c=[],d=0,e=0;e<=b;e++){var f=d+(H(this,e)&65535)+(H(a,e)&65535),g=(f>>>16)+(H(this,e)>>>16)+(H(a,e)>>>16);d=g>>>16;f&=65535;g&=65535;c[e]=g<<16|f}return new A(c,c[c.length-1]&-2147483648?-1:0)};function J(a,b){return a.add(E(b))}
function K(a,b){if(I(a)||I(b))return D;if(-1==a.b)return-1==b.b?K(E(a),E(b)):E(K(E(a),b));if(-1==b.b)return E(K(a,E(b)));if(0>L(a,Ya)&&0>L(b,Ya))return C(G(a)*G(b));for(var c=a.a.length+b.a.length,d=[],e=0;e<2*c;e++)d[e]=0;for(e=0;e<a.a.length;e++)for(var f=0;f<b.a.length;f++){var g=H(a,e)>>>16,h=H(a,e)&65535,l=H(b,f)>>>16,r=H(b,f)&65535;d[2*e+2*f]+=h*r;$a(d,2*e+2*f);d[2*e+2*f+1]+=g*r;$a(d,2*e+2*f+1);d[2*e+2*f+1]+=h*l;$a(d,2*e+2*f+1);d[2*e+2*f+2]+=g*l;$a(d,2*e+2*f+2)}for(e=0;e<c;e++)d[e]=d[2*e+1]<<
16|d[2*e];for(e=c;e<2*c;e++)d[e]=0;return new A(d,0)}function $a(a,b){for(;(a[b]&65535)!=a[b];)a[b+1]+=a[b]>>>16,a[b]&=65535,b++}
function Za(a,b){if(I(b))throw Error("division by zero");if(I(a))return D;if(-1==a.b)return-1==b.b?Za(E(a),E(b)):E(Za(E(a),b));if(-1==b.b)return E(Za(a,E(b)));if(30<a.a.length){if(-1==a.b||-1==b.b)throw Error("slowDivide_ only works with positive integers.");for(var c=F;0>=L(b,a);)c=ab(c,1),b=ab(b,1);var d=M(c,1),e=M(b,1);b=M(b,2);for(c=M(c,2);!I(b);){var f=e.add(b);0>=L(f,a)&&(d=d.add(c),e=f);b=M(b,1);c=M(c,1)}return d}for(c=D;0<=L(a,b);){d=Math.max(1,Math.floor(G(a)/G(b)));e=Math.ceil(Math.log(d)/
Math.LN2);e=48>=e?1:Math.pow(2,e-48);f=C(d);for(var g=K(f,b);-1==g.b||0<L(g,a);)d-=e,f=C(d),g=K(f,b);I(f)&&(f=F);c=c.add(f);a=J(a,g)}return c}A.prototype.and=function(a){for(var b=Math.max(this.a.length,a.a.length),c=[],d=0;d<b;d++)c[d]=H(this,d)&H(a,d);return new A(c,this.b&a.b)};A.prototype.or=function(a){for(var b=Math.max(this.a.length,a.a.length),c=[],d=0;d<b;d++)c[d]=H(this,d)|H(a,d);return new A(c,this.b|a.b)};
A.prototype.xor=function(a){for(var b=Math.max(this.a.length,a.a.length),c=[],d=0;d<b;d++)c[d]=H(this,d)^H(a,d);return new A(c,this.b^a.b)};function ab(a,b){var c=b>>5;b%=32;for(var d=a.a.length+c+(0<b?1:0),e=[],f=0;f<d;f++)e[f]=0<b?H(a,f-c)<<b|H(a,f-c-1)>>>32-b:H(a,f-c);return new A(e,a.b)}function M(a,b){var c=b>>5;b%=32;for(var d=a.a.length-c,e=[],f=0;f<d;f++)e[f]=0<b?H(a,f+c)>>>b|H(a,f+c+1)<<32-b:H(a,f+c);return new A(e,a.b)};function bb(a,b,c){for(var d in a)b.call(c,a[d],d,a)};J(ab(F,32),F);B(65535);J(ab(F,128),F);var N;a:{var cb=q.navigator;if(cb){var db=cb.userAgent;if(db){N=db;break a}}N=""}function O(a){return-1!=N.indexOf(a)};var eb=O("Opera"),P=O("Trident")||O("MSIE"),fb=O("Edge"),gb=fb||P,hb=O("Gecko")&&!(-1!=N.toLowerCase().indexOf("webkit")&&!O("Edge"))&&!(O("Trident")||O("MSIE"))&&!O("Edge"),ib=-1!=N.toLowerCase().indexOf("webkit")&&!O("Edge"),jb=O("Macintosh");function kb(){var a=q.document;return a?a.documentMode:void 0}var lb;
a:{var mb="",nb=function(){var a=N;if(hb)return/rv:([^\);]+)(\)|;)/.exec(a);if(fb)return/Edge\/([\d\.]+)/.exec(a);if(P)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(ib)return/WebKit\/(\S+)/.exec(a);if(eb)return/(?:Version)[ \/]?(\S+)/.exec(a)}();nb&&(mb=nb?nb[1]:"");if(P){var ob=kb();if(null!=ob&&ob>parseFloat(mb)){lb=String(ob);break a}}lb=mb}var pb=lb,qb={},rb;var sb=q.document;rb=sb&&P?kb()||("CSS1Compat"==sb.compatMode?parseInt(pb,10):5):void 0;function Q(){this.b=this.b;this.a=this.a}Q.prototype.b=!1;Q.prototype.m=function(){this.b||(this.b=!0,this.f())};Q.prototype.f=function(){if(this.a)for(;this.a.length;)this.a.shift()()};function tb(a){a&&"function"==typeof a.m&&a.m()};function T(){this.b="";this.f=ub}T.prototype.c=!0;T.prototype.a=function(){return this.b};function wb(a){if(a instanceof T&&a.constructor===T&&a.f===ub)return a.b;t(a);return"type_error:SafeUrl"}var xb=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i,ub={};function yb(a){var b=new T;b.b=a;return b};function U(){this.b="";this.f=zb}U.prototype.c=!0;U.prototype.a=function(){return this.b};function Ab(a){if(a instanceof U&&a.constructor===U&&a.f===zb)return a.b;t(a);return"type_error:SafeHtml"}var zb={};var Bb=!P||9<=Number(rb),Cb=!P||9<=Number(rb),Db=P&&!sa(qb,"9",function(){for(var a=0,b=Na(String(pb)).split("."),c=Na("9").split("."),d=Math.max(b.length,c.length),e=0;0==a&&e<d;e++){var f=b[e]||"",g=c[e]||"";do{f=/(\d*)(\D*)(.*)/.exec(f)||["","","",""];g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];if(0==f[0].length&&0==g[0].length)break;a=Va(0==f[1].length?0:parseInt(f[1],10),0==g[1].length?0:parseInt(g[1],10))||Va(0==f[2].length,0==g[2].length)||Va(f[2],g[2]);f=f[3];g=g[3]}while(0==a)}return 0<=a}),
Eb=function(){if(!q.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0}});try{q.addEventListener("test",na,b),q.removeEventListener("test",na,b)}catch(c){}return a}();function Fb(a,b){this.type=a;this.a=this.target=b;this.f=!1}Fb.prototype.c=function(){this.f=!0};function V(a,b){Fb.call(this,a?a.type:"");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.b=null;if(a){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(hb){a:{try{ra(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else"mouseover"==c?b=
a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
a.metaKey;this.pointerId=a.pointerId||0;this.pointerType="string"==typeof a.pointerType?a.pointerType:Gb[a.pointerType]||"";this.b=a;a.defaultPrevented&&this.c()}}qa(V,Fb);var Hb=[1,4,2],Gb={2:"touch",3:"pen",4:"mouse"};V.prototype.c=function(){V.j.c.call(this);var a=this.b;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Db)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};var Ib="closure_listenable_"+(1E6*Math.random()|0),Jb=0;function Kb(a,b,c,d,e){this.listener=a;this.a=null;this.src=b;this.type=c;this.capture=!!d;this.b=e;this.key=++Jb;this.h=this.i=!1}function Lb(a){a.h=!0;a.listener=null;a.a=null;a.src=null;a.b=null};function Mb(a){this.src=a;this.a={};this.b=0}Mb.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var g;a:{for(g=0;g<a.length;++g){var h=a[g];if(!h.h&&h.listener==b&&h.capture==!!d&&h.b==e)break a}g=-1}-1<g?(b=a[g],c||(b.i=!1)):(b=new Kb(b,this.src,f,!!d,e),b.i=c,a.push(b));return b};var Nb="closure_lm_"+(1E6*Math.random()|0),Ob={},Pb=0;function Qb(a,b,c,d,e){if(d&&d.once)return Rb(a,b,c,d,e);if("array"==t(b)){for(var f=0;f<b.length;f++)Qb(a,b[f],c,d,e);return null}c=Sb(c);return a&&a[Ib]?a.a(b,c,oa(d)?!!d.capture:!!d,e):Tb(a,b,c,!1,d,e)}
function Tb(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var g=oa(e)?!!e.capture:!!e,h=Ub(a);h||(a[Nb]=h=new Mb(a));c=h.add(b,c,d,g,f);if(c.a)return c;d=Vb();c.a=d;d.src=a;d.listener=c;if(a.addEventListener)Eb||(e=g),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(Wb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");Pb++;return c}
function Vb(){var a=Xb,b=Cb?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function Rb(a,b,c,d,e){if("array"==t(b)){for(var f=0;f<b.length;f++)Rb(a,b[f],c,d,e);return null}c=Sb(c);return a&&a[Ib]?a.b(b,c,oa(d)?!!d.capture:!!d,e):Tb(a,b,c,!0,d,e)}
function Yb(a){if("number"!=typeof a&&a&&!a.h){var b=a.src;if(b&&b[Ib])b.c(a);else{var c=a.type,d=a.a;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(Wb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);Pb--;if(c=Ub(b)){d=a.type;if(d in c.a){var e=c.a[d],f=Wa(e,a),g;(g=0<=f)&&Array.prototype.splice.call(e,f,1);g&&(Lb(a),0==c.a[d].length&&(delete c.a[d],c.b--))}0==c.b&&(c.src=null,b[Nb]=null)}else Lb(a)}}}
function Wb(a){return a in Ob?Ob[a]:Ob[a]="on"+a}function Zb(a,b,c,d){var e=!0;if(a=Ub(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.h&&(f=$b(f,d),e=e&&!1!==f)}return e}function $b(a,b){var c=a.listener,d=a.b||a.src;a.i&&Yb(a);return c.call(d,b)}
function Xb(a,b){if(a.h)return!0;if(!Cb){if(!b)a:{b=["window","event"];for(var c=q,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c}d=b;b=new V(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(g){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.a;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.a=d[e];var f=Zb(d[e],a,!0,b);c=c&&f}for(e=0;e<d.length;e++)b.a=d[e],f=Zb(d[e],a,!1,b),c=c&&f}return c}return $b(a,
new V(b,this))}function Ub(a){a=a[Nb];return a instanceof Mb?a:null}var ac="__closure_events_fn_"+(1E9*Math.random()>>>0);function Sb(a){if("function"==t(a))return a;a[ac]||(a[ac]=function(b){return a.handleEvent(b)});return a[ac]};function W(a){Q.call(this);this.g=a;this.c={}}qa(W,Q);var bc=[];function cc(a){bb(a.c,function(a,c){this.c.hasOwnProperty(c)&&Yb(a)},a);a.c={}}W.prototype.f=function(){W.j.f.call(this);cc(this)};W.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented");};function dc(a){Q.call(this);this.c=a||document.body;this.g=new W(this);a=pa(tb,this.g);this.b?a():(this.a||(this.a=[]),this.a.push(a));a=this.g;var b=this.c,c=this.s,d="click";"array"!=t(d)&&(d&&(bc[0]=d.toString()),d=bc);for(var e=0;e<d.length;e++){var f=Qb(b,d[e],c||a.handleEvent,!1,a.g||a);if(!f)break;a.c[f.key]=f}}qa(dc,Q);
dc.prototype.s=function(a){if((Bb?0==a.b.button:"click"==a.type||a.b.button&Hb[0])&&!(ib&&jb&&a.ctrlKey)&&!a.f)for(var b=a.target;b&&b!=this.c;){if(b.tagName&&"a"==b.tagName.toLowerCase()){var c=b.getAttribute("href")||b.getAttributeNS("http://www.w3.org/1999/xlink","href"),d=c;var e=d;try{var f=void 0,g=La(d)[3];f=null==g?null:g;var h=Ja(f,!0);var l;if(l=Ha("www.google.com",h)){var r=La(d)[5];l=Ha("/url",Ja(r,!0))}if(l){var vb=Ma(d,"q");e=vb?vb:Ma(d,"url")}}catch(R){a:{d=R;if(null!=d&&(f=d.__java$exception,
null!=f)){R=f;break a}if(d instanceof TypeError){var x=f=new Da,S=x;S.a=!0;S.b="__noinit__";xa(x);wa(x,d);x.c=v(d);d=f}else S=x=f=new Ca,S.a=!0,S.b="__noinit__",xa(x),wa(x,d),x.c=v(d),d=f;R=d}if(!(R instanceof za))throw R.b;}e=null!=e?e:"";if(c!=e){l=void 0;g=e;b={target:"_blank",noreferrer:!0};c=window;g instanceof T?h=g:(h="undefined"!=typeof g.href?g.href:String(g),h instanceof T||(h="object"==typeof h&&h.c?h.a():String(h),xb.test(h)||(h="about:invalid#zClosurez"),h=yb(h)));g=b.target||g.target;
r=[];for(l in b)switch(l){case "width":case "height":case "top":case "left":r.push(l+"="+b[l]);break;case "target":case "noopener":case "noreferrer":break;default:r.push(l+"="+(b[l]?1:0))}l=r.join(",");(O("iPhone")&&!O("iPod")&&!O("iPad")||O("iPad")||O("iPod"))&&c.navigator&&c.navigator.standalone&&g&&"_self"!=g?(r=l=c.document.createElement("A"),h instanceof T||h instanceof T||(h="object"==typeof h&&h.c?h.a():String(h),xb.test(h)||(h="about:invalid#zClosurez"),h=yb(h)),r.href=wb(h),l.setAttribute("target",
g),b.noreferrer&&l.setAttribute("rel","noreferrer"),b=document.createEvent("MouseEvent"),b.initMouseEvent("click",!0,!0,c,1),l.dispatchEvent(b)):b.noreferrer?(c=c.open("",g,l),b=wb(h),c&&(gb&&-1!=b.indexOf(";")&&(b="'"+b.replace(/'/g,"%27")+"'"),c.opener=null,Ua.test(b)&&(-1!=b.indexOf("&")&&(b=b.replace(Oa,"&amp;")),-1!=b.indexOf("<")&&(b=b.replace(Pa,"&lt;")),-1!=b.indexOf(">")&&(b=b.replace(Qa,"&gt;")),-1!=b.indexOf('"')&&(b=b.replace(Ra,"&quot;")),-1!=b.indexOf("'")&&(b=b.replace(Sa,"&#39;")),
-1!=b.indexOf("\x00")&&(b=b.replace(Ta,"&#0;"))),h=new U,h.b='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+b+'">',c.document.write(Ab(h)),c.document.close())):(c=c.open(wb(h),g,l))&&b.noopener&&(c.opener=null);a.c();break}}b=b.parentNode}};function ec(a){new dc(a)}var X=["DOCS_installLinkReferrerSanitizer"],Y=q;X[0]in Y||"undefined"==typeof Y.execScript||Y.execScript("var "+X[0]);
for(var Z;X.length&&(Z=X.shift());)X.length||void 0===ec?Y[Z]&&Y[Z]!==Object.prototype[Z]?Y=Y[Z]:Y=Y[Z]={}:Y[Z]=ec;}).call(this);
</script><script type="text/javascript" nonce="xLpsEwFiOnMTIehWwqUE18pn8Cg">DOCS_installLinkReferrerSanitizer();</script></body></html>