<!DOCTYPE html><html><head><title>svn-3649</title><link rel="shortcut icon" href="https://ssl.gstatic.com/docs/documents/images/kix-favicon6.ico"><style type="text/css" nonce="7a2XA8llC55Cud68s4E/7ddjQe8">
      body {
        font-family: arial, sans, sans-serif;
        margin: 0;
      }

      iframe {
        border: 0;
        frameborder: 0;
        height: 100%;
        width: 100%;
      }

      #header, #footer {
        background: #f0f0f0;
        padding: 10px 10px;
      }

      #header {
        border-bottom: 1px #ccc solid;
      }

      #footer {
        border-top: 1px #ccc solid;
        border-bottom: 1px #ccc solid;
        font-size: 13;
      }

      #contents {
        margin: 6px;
      }

      .dash {
        padding: 0 6px;
      }
    </style></head><body><div id="header">svn-3649</div><div id="contents"><style type="text/css">@import url('https://themes.googleusercontent.com/fonts/css?kit=cS6RGr7q58RsNEVv8D6BRQ');ol{margin:0;padding:0}table td,table th{padding:0}.c28{-webkit-text-decoration-skip:none;color:#000099;font-weight:400;text-decoration:underline;vertical-align:baseline;text-decoration-skip-ink:none;font-size:11pt;font-family:"Arial";font-style:normal}.c38{-webkit-text-decoration-skip:none;color:#000099;font-weight:700;text-decoration:underline;vertical-align:baseline;text-decoration-skip-ink:none;font-size:12pt;font-family:"Times New Roman";font-style:normal}.c29{-webkit-text-decoration-skip:none;color:#000099;font-weight:400;text-decoration:underline;vertical-align:baseline;text-decoration-skip-ink:none;font-family:"Courier New";font-style:normal}.c4{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c9{color:#0000ff;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c17{color:#0000ff;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Verdana";font-style:normal}.c25{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c2{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c3{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:14pt;font-family:"Arial";font-style:normal}.c19{color:#ff9900;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Verdana";font-style:normal}.c5{color:#9900ff;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c12{color:#0000ff;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c24{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:14pt;font-family:"Times New Roman";font-style:normal}.c30{color:#0000ff;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:12pt;font-family:"Times New Roman";font-style:normal}.c33{color:#ff9900;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c1{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Verdana";font-style:normal}.c16{color:#0000ff;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:14pt;font-family:"Times New Roman";font-style:normal}.c20{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:12pt;font-family:"Times New Roman";font-style:normal}.c8{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-family:"Courier New";font-style:normal}.c21{color:#0000ff;font-weight:400;text-decoration:none;vertical-align:baseline;font-family:"Courier New";font-style:normal}.c11{color:#ff0000;font-weight:400;text-decoration:none;vertical-align:baseline;font-family:"Courier New";font-style:normal}.c39{color:#ff0000;font-weight:400;text-decoration:none;vertical-align:baseline;font-family:"Verdana";font-style:normal}.c23{color:#0000ff;font-weight:700;text-decoration:none;vertical-align:baseline;font-family:"Courier New";font-style:normal}.c14{color:#ff0000;font-weight:700;text-decoration:none;vertical-align:baseline;font-family:"Courier New";font-style:normal}.c22{color:#ff9900;font-weight:700;text-decoration:none;vertical-align:baseline;font-family:"Courier New";font-style:normal}.c0{padding-top:0pt;padding-bottom:0pt;line-height:1.15;text-align:left;height:11pt}.c26{vertical-align:baseline;font-style:normal;color:#000000;font-weight:400;text-decoration:none}.c35{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-style:normal}.c6{padding-top:0pt;padding-bottom:0pt;line-height:1.15;text-align:left}.c31{padding-top:0pt;padding-bottom:0pt;line-height:1.15;text-align:center}.c32{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c27{font-size:14pt;font-weight:700}.c40{font-size:12pt;font-family:"Verdana"}.c18{color:inherit;text-decoration:inherit}.c34{font-size:12pt;font-family:"Arial"}.c41{font-size:14pt;font-family:"Arial Black"}.c37{font-size:11pt}.c15{background-color:#ff0000}.c7{margin-left:36pt}.c13{margin-left:72pt}.c36{font-family:"Courier New"}.c10{text-indent:36pt}.title{padding-top:24pt;color:#000000;font-weight:700;font-size:36pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:18pt;color:#666666;font-size:24pt;padding-bottom:4pt;font-family:"Georgia";line-height:1.15;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:24pt;color:#000000;font-weight:700;font-size:24pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-weight:700;font-size:18pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:14pt;color:#000000;font-weight:700;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:12pt;color:#000000;font-weight:700;font-size:12pt;padding-bottom:2pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:11pt;color:#000000;font-weight:700;font-size:11pt;padding-bottom:2pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:10pt;color:#000000;font-weight:700;font-size:10pt;padding-bottom:2pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}</style><p class="c31"><span class="c3">svn-3649</span></p><p class="c6"><span class="c3">Version:</span></p><p class="c6"><span class="c35 c34">1.6.x</span></p><p class="c0"><span class="c34 c35"></span></p><p class="c6"><span class="c3">Bug Link:</span></p><p class="c6"><span class="c28"><a class="c18" href="https://www.google.com/url?q=http://www.google.com/url?q%3Dhttp%253A%252F%252Fsubversion.tigris.org%252Fissues%252Fshow_bug.cgi%253Fid%253D3649%26sa%3DD%26sntz%3D1%26usg%3DAFQjCNHxGKcG7cS3Yv_-tcSjBI9gve23Rw&amp;sa=D&amp;ust=1534663300205000">http://subversion.tigris.org/issues/show_bug.cgi?id=3649</a></span></p><p class="c0"><span class="c25"></span></p><p class="c6"><span class="c3">Patch Link:</span></p><p class="c6"><span class="c28"><a class="c18" href="https://www.google.com/url?q=http://www.google.com/url?q%3Dhttp%253A%252F%252Fsvn.apache.org%252Fviewvc%253Fdiff_format%253Dh%2526view%253Drevision%2526revision%253D953022%26sa%3DD%26sntz%3D1%26usg%3DAFQjCNGL1e9XaaN31cE-hVtUCrrvXSfWEA&amp;sa=D&amp;ust=1534663300206000">http://svn.apache.org/viewvc?diff_format=h&amp;view=revision&amp;revision=953022</a></span></p><p class="c0"><span class="c25"></span></p><p class="c6"><span class="c3">Symptom:</span></p><p class="c6"><span class="c26 c37">svn mkdir  --parent always complains about the first base directory alphabetically that it does not exist (which actually exists) when two or more URLs are specified with different paths off the root of the repo.</span></p><p class="c0"><span class="c26 c40"></span></p><p class="c6"><span class="c26 c41">How it is diagnosed:</span></p><p class="c6"><span class="c25">reproduced!</span></p><p class="c6"><span class="c25"><br>[peh003@soprano repository]$ svnadmin create repos</span></p><p class="c6"><span class="c25">[peh003@soprano repository]$ svn mkdir -m &#39; &#39; file:///home/yyzhou/peh003/repository/repos/test1 file:///home/yyzhou/peh003/repository/repos/test2</span></p><p class="c0"><span class="c25"></span></p><p class="c6"><span class="c33">Committed revision 1.</span></p><p class="c0"><span class="c1"></span></p><p class="c6"><span class="c1">[peh003@soprano repository]$ svn mkdir -m&#39; &#39; --parents file://`pwd`/repos/test1/one/two file://`pwd`/repos/test2/one/two</span></p><p class="c6"><span class="c37 c39">svn: Path &#39;test1&#39; not present</span></p><p class="c0"><span class="c1"></span></p><p class="c6"><span class="c17">/*The expected result should be that the mkdir succeed.*/</span></p><p class="c0"><span class="c1"></span></p><p class="c6"><span class="c1">[peh003@soprano repository]$ svn ls --depth=infinity file://`pwd`/repos</span></p><p class="c6"><span class="c19">test1/                     </span><span class="c17">/*it actually exists!*/</span></p><p class="c6"><span class="c19">test2/</span></p><p class="c0"><span class="c1"></span></p><p class="c0"><span class="c1"></span></p><p class="c6"><span class="c3">Root Cause:</span></p><p class="c0"><span class="c3"></span></p><p class="c6"><span class="c2">Brief:</span></p><p class="c6"><span class="c25">The base directory of the session is set incorrectly.</span></p><p class="c0"><span class="c25"></span></p><p class="c6"><span class="c2">Detail:</span></p><p class="c6"><span class="c2">There are four target directories to be made in sequence:</span></p><p class="c6"><span class="c16">&quot;test1/one&quot;</span></p><p class="c6"><span class="c16">&quot;test1/one/two&quot;</span></p><p class="c6"><span class="c16">&quot;test2/one&quot;</span></p><p class="c6"><span class="c16">&quot;test2/one/two&quot;</span></p><p class="c0"><span class="c2"></span></p><p class="c6"><span class="c2">When they use two iterations to generate these four targets given the provided two urls </span></p><p class="c6"><span class="c16">file:///home/yyzhou/peh003/repository/repos/test1/one/two&quot;,</span></p><p class="c6"><span class="c16">file:///home/yyzhou/peh003/repository/repos/test2/one/two&quot;, </span></p><p class="c6"><span class="c2">the session’s base directory is set twice in the meantime.  The first time it’s set to “test1”,</span></p><p class="c6"><span class="c2">the second time it’s set to “test2”.</span></p><p class="c0"><span class="c2"></span></p><p class="c6"><span class="c2">And then when they want to make the first target “test1/one”, they try to enter the parent part of “test1/one” that exists (i.e. “test1”) to make dir “one”. Since the session’s base directory is still “test2”, the full path of the parent part is then “test2/test1”, which of course doest not exist. so the error message complains “test1” does not exist, which is quite confusing. If it complains the “test2/test1” does not exist, it would save much time to diagnose this bug(at least for me).</span></p><p class="c0"><span class="c2"></span></p><p class="c0"><span class="c2"></span></p><p class="c0"><span class="c2"></span></p><p class="c6"><span class="c5">======================================================</span></p><p class="c6"><span class="c5">Where the error message was printed?</span></p><p class="c6"><span class="c4">static svn_error_t *</span></p><p class="c6"><span class="c35 c36">open_directory</span><span class="c4">(...)</span></p><p class="c6"><span class="c4">{</span></p><p class="c6 c7"><span class="c4">  ...</span></p><p class="c6 c7"><span class="c4">  SVN_ERR(svn_fs_check_path(&amp;kind, eb-&gt;txn_root, full_path, pool));</span></p><p class="c6 c7"><span class="c8">  if (</span><span class="c11">kind == svn_node_none</span><span class="c4">)</span></p><p class="c6 c7"><span class="c4">    return svn_error_createf(SVN_ERR_FS_NOT_DIRECTORY, NULL,</span></p><p class="c6 c7"><span class="c4">                             _(&quot;Path &#39;%s&#39; not present&quot;),</span></p><p class="c6 c7"><span class="c4">                             path);</span></p><p class="c6 c7"><span class="c4">  ...</span></p><p class="c6 c7"><span class="c4">  return SVN_NO_ERROR;</span></p><p class="c6"><span class="c4">}</span></p><p class="c0"><span class="c24"></span></p><p class="c0"><span class="c2"></span></p><p class="c6"><span class="c2">======================================================</span></p><p class="c6"><span class="c5">Path from fault to failure</span></p><p class="c0"><span class="c2"></span></p><p class="c6"><span class="c8">static svn_error_t *<br></span><span class="c22">mkdir_urls</span><span class="c8">(...)<br>{<br>  ...<br>  /* Find any non-existent parent directories */<br>          if (make_parents) </span><span class="c21">//make_parents = 1</span><span class="c4"><br>            {<br>                      apr_array_header_t *all_urls = apr_array_make(pool, urls-&gt;nelts,<br>                                                    sizeof(const char *));</span></p><p class="c6"><span class="c23">      </span><span class="c9">                /*first_url =                                                 </span></p><p class="c6 c13"><span class="c21">&quot;file:///home/yyzhou/peh003/repository/repos/test1/one/two&quot; */</span><span class="c4"><br>const char *first_url = APR_ARRAY_IDX(urls, 0, const char *);<br>apr_pool_t *iterpool = svn_pool_create(pool);</span></p><p class="c6"><span class="c23">                      </span><span class="c21">/*session-&gt;priv-&gt;fs_path-&gt;data is set to &quot;/test1/one/two&quot;*/</span><span class="c8"><br>                      SVN_ERR(</span><span class="c11">svn_client__open_ra_session_internal</span><span class="c8">(&amp;ra_session,                                         first_url...));<br>                      </span><a id="id.rcemit-6nkdav"></a><span class="c8">for (i = 0; i &lt; urls-&gt;nelts; i++) </span><span class="c23">//urls-&gt;nelts = 2</span><span class="c4"><br>                        {<br>                                  const char *url = APR_ARRAY_IDX(urls, i, const char *);<br>                                  svn_pool_clear(iterpool);</span></p><p class="c6"><span class="c8">  </span><span class="c11">                            </span><span class="c14 c37">/* Fault point!</span></p><p class="c6"><span class="c12">                        In the first iteration, ra_session-&gt;priv-&gt;fs_path-&gt;data is                                 changed from &quot;/test1/one/two&quot; to &quot;test1&quot;;</span></p><p class="c6"><span class="c23">                        In the second iteration, ra_session-&gt;priv-&gt;fs_path-&gt;data is                                 changed from &quot;/test1/one/two&quot; to  &quot;test2&quot;, later, this fault                                 takes a long way to propagate         to the failure point!!!!</span></p><p class="c6 c7"><span class="c14">                      */</span><span class="c8"><br>                          SVN_ERR(</span><a id="id.jieph0-5g4mt1"></a><span class="c11">add_url_parents</span><span class="c8">(ra_session, url, all_urls, iterpool,                                         pool));<br>        }<br>       svn_pool_destroy(iterpool);<br>       urls = all_urls;<br>  }<br>  ...<br>  qsort(targets-&gt;elts, targets-&gt;nelts, targets-&gt;elt_size,<br>        svn_sort_compare_paths);<br></span><span class="c9">/*        After qsort:</span></p><p class="c6 c13"><span class="c9">(gdb)  p ((const char **)(targets)-&gt;elts)[0]</span></p><p class="c6 c13"><span class="c9">$4 = 0x6543d0 &quot;test1/one&quot;</span></p><p class="c6 c13"><span class="c9">(gdb)  p ((const char **)(targets)-&gt;elts)[1]</span></p><p class="c6 c13"><span class="c9">$5 = 0x654408 &quot;test1/one/two&quot;</span></p><p class="c6 c13"><span class="c9">(gdb)  p ((const char **)(targets)-&gt;elts)[2]</span></p><p class="c6 c13"><span class="c9">$6 = 0x654440 &quot;test2/one&quot;ra_session-&gt;priv-&gt;fs_path-&gt;data</span></p><p class="c6 c13"><span class="c9">(gdb)  p ((const char **)(targets)-&gt;elts)[3]</span></p><p class="c6 c13"><span class="c9">$7 = 0x654478 &quot;test2/one/two&quot;</span></p><p class="c6 c7"><span class="c21">*/</span></p><p class="c6 c7"><span class="c21">/*We should reparent the ra_session-&gt;priv-&gt;fs_path-&gt;data to the common part of all the 4 target directories above , in this case since common is the repository’s root url, a_session-&gt;priv-&gt;fs_path-&gt;data will be set to</span><span class="c11">&quot;/&quot;</span><span class="c21">, which is the root of all directories in svn’s repsentation, and when later opening the first target url,&quot;test1/one&quot;, and the “test1” part will be joined with ra_session-&gt;priv-&gt;fs_path-&gt;data to open first, which is valid since </span><span class="c11">&quot;/test1&quot;</span><span class="c9"> exists already”.</span></p><p class="c6 c7"><span class="c21">If the ra_session-&gt;priv-&gt;fs_path-&gt;data is still </span><span class="c11">&quot;test2&quot;</span><span class="c21">, when joining a full path it will be </span><span class="c11">&quot;/test2/test1&quot;</span><span class="c9">, which doesn’t exist!</span></p><p class="c6 c7"><span class="c21">*/</span></p><p class="c6 c7"><span class="c4">+ if (ra_session)<br>+  SVN_ERR(svn_ra_reparent(ra_session, common, pool));<br>   ...</span></p><p class="c6 c7"><span class="c21"> /*here </span><span class="c11">ra_session-&gt;priv-&gt;fs_path-&gt;data</span><span class="c21">’s wrong value will infects</span><span class="c11"> edit_baton-&gt; base_path</span><span class="c21">!!!!!*/</span><span class="c8"><br>  SVN_ERR(</span><span class="c11">svn_ra_get_commit_editor3</span><span class="c8">(ra_session, &amp;editor, &amp;edit_baton,...));<br><br>  /* Call the path-based editor driver. */<br>  err = svn_delta_path_driver(editor, </span><span class="c14">edit_baton</span><span class="c8">, SVN_INVALID_REVNUM,<br>                              targets, path_driver_cb_func,<br>                              (void *)editor, pool);<br>  if (err) </span><span class="c23">//failed here!!</span><span class="c4"><br>   ...<br>   /* Close the edit. */<br>   return editor-&gt;close_edit(edit_baton, pool);</span></p><p class="c6"><span class="c4">}</span></p><p class="c6"><span class="c4">svn_error_t *</span></p><p class="c6"><span class="c22">svn_delta_path_driver</span><span class="c4">(...)</span></p><p class="c6"><span class="c4">{</span></p><p class="c6"><span class="c4">          ...</span></p><p class="c6"><span class="c4">          /* Sort the paths in a depth-first directory-ish order. */</span></p><p class="c6"><span class="c4">          qsort(paths-&gt;elts, paths-&gt;nelts, paths-&gt;elt_size, svn_sort_compare_paths);</span></p><p class="c6 c10"><span class="c9">/*(gdb) p ((const char **)(paths)-&gt;elts)[0]</span></p><p class="c6 c7"><span class="c9">$7 = 0x654920 &quot;test1/one&quot;</span></p><p class="c6 c7"><span class="c21">...*/</span></p><p class="c6"><span class="c8">          path = APR_ARRAY_IDX(paths, 0, const char *); /</span><span class="c21">/path=&quot;test1/one&quot;</span></p><p class="c6"><span class="c4">          if (svn_path_is_empty(path))</span></p><p class="c6"><span class="c4">                  …</span></p><p class="c6"><span class="c4">          else</span></p><p class="c6"><span class="c4">            {</span></p><p class="c6"><span class="c8">             </span><span class="c9">        /*</span></p><p class="c6 c13"><span class="c21">edit_baton-&gt;base_path=</span><span class="c11">&quot;/test2&quot;</span><span class="c9">, which will infect                         db-&gt;edit_baton-&gt;base_path</span></p><p class="c6 c7 c10"><span class="c21">*/</span></p><p class="c6"><span class="c8">                      SVN_ERR(editor-&gt;open_root(</span><span class="c14">edit_baton</span><span class="c8">, revision, subpool, </span><span class="c14">&amp;db</span><span class="c4">));</span></p><p class="c6"><span class="c4">            }</span></p><p class="c6"><span class="c4">          item-&gt;pool = subpool;</span></p><p class="c6"><span class="c4">          item-&gt;dir_baton = db;</span></p><p class="c6"><span class="c8">          APR_ARRAY_PUSH(db_stack, void *) = item; </span><span class="c14">//db_stack get infected!!!!</span></p><p class="c0"><span class="c4"></span></p><p class="c6 c7"><span class="c4">  /* Now, loop over the commit items, traversing the URL tree and</span></p><p class="c6 c7"><span class="c4">     driving the editor. */</span></p><p class="c6 c10"><span class="c4">for (; i &lt; paths-&gt;nelts; i++)</span></p><p class="c6 c7"><span class="c4">{</span></p><p class="c6 c7"><span class="c4">         ...</span></p><p class="c6 c7"><span class="c4">              /* Get the next path. */</span></p><p class="c6 c7"><span class="c8">              path = APR_ARRAY_IDX(paths, i, const char *);/</span><span class="c21">/&quot;test1/one&quot;</span></p><p class="c6 c7"><span class="c4">               ...</span></p><p class="c6 c7"><span class="c8">              svn_path_split(path, &amp;pdir, &amp;bname, iterpool);</span><span class="c21">//pdir=&quot;test1&quot;</span></p><p class="c6 c7"><span class="c4">              if (strlen(pdir) &gt; common_len)</span></p><p class="c6 c7"><span class="c4">                {</span></p><p class="c6 c7"><span class="c4">                          ...</span></p><p class="c6 c7"><span class="c4">                          while (1)</span></p><p class="c6 c7"><span class="c4">                            {</span></p><p class="c6 c7"><span class="c8">                                      const char *rel = pdir;</span><span class="c21">// rel=&quot;test1&quot;</span></p><p class="c6 c7"><span class="c4">                            ...</span></p><p class="c6 c7"><span class="c8">                                          /* Open the subdirectory. */</span></p><p class="c6 c7"><span class="c23">                        </span><span class="c21">//fails here!</span></p><p class="c6 c7"><span class="c8">                                           SVN_ERR(</span><span class="c11">open_dir</span><span class="c8">(</span><span class="c11">db_stack</span><span class="c4">, editor, rel, revision, pool)); </span></p><p class="c6 c7"><span class="c4">                             …</span></p><p class="c6 c7"><span class="c4">                }</span></p><p class="c6 c7"><span class="c4">          }</span></p><p class="c6 c7"><span class="c4">}</span></p><p class="c6"><span class="c4">             ...</span></p><p class="c6"><span class="c4">}</span></p><p class="c0"><span class="c4"></span></p><p class="c6"><span class="c4">static svn_error_t *</span></p><p class="c6"><span class="c22">open_dir</span><span class="c8">(apr_array_header_t *</span><span class="c11">db_stack</span><span class="c8">,...const char *</span><span class="c11">path</span><span class="c4">,...)</span></p><p class="c6"><span class="c4">{</span></p><p class="c6 c7"><span class="c4">  ...</span></p><p class="c6 c7"><span class="c4">  SVN_ERR_ASSERT(db_stack &amp;&amp; db_stack-&gt;nelts);</span></p><p class="c6 c7"><span class="c4">  item = APR_ARRAY_IDX(db_stack, db_stack-&gt;nelts - 1, void *);</span></p><p class="c6 c7"><span class="c4">  parent_db = item-&gt;dir_baton;</span></p><p class="c6 c7"><span class="c4">  subpool = svn_pool_create(pool);</span></p><p class="c6 c7"><span class="c21">  /*path=</span><span class="c11">&quot;test1&quot;</span><span class="c21">,db-&gt;edit_baton-&gt;base_path =</span><span class="c11">&quot;/test2&quot;,</span><span class="c9"> which got infection             </span></p><p class="c6 c7"><span class="c21">    from an error value long away from </span><span class="c29"><a class="c18" href="#id.jieph0-5g4mt1">ra_session in mkdir_urls</a></span><span class="c21">*/</span></p><p class="c6 c7"><span class="c8">  SVN_ERR(</span><span class="c14">editor-&gt;open_directory</span><span class="c8">(path, </span><span class="c11">parent_db</span><span class="c8">, revision, subpool, &amp;db));</span><span class="c23">//fails here!</span></p><p class="c6 c7"><span class="c4">  ...</span></p><p class="c6 c7"><span class="c4">  return SVN_NO_ERROR;</span></p><p class="c6"><span class="c4">}</span></p><p class="c6"><span class="c22">open_directory</span><span class="c4">(...)</span></p><p class="c6"><span class="c4">{</span></p><p class="c6 c7"><span class="c4">  struct dir_baton *pb = parent_baton;</span></p><p class="c6 c7"><span class="c4">  struct edit_baton *eb = pb-&gt;edit_baton;</span></p><p class="c6 c7"><span class="c4">  svn_node_kind_t kind;</span></p><p class="c6 c7"><span class="c8">  const char *full_path = svn_path_join(</span><span class="c14">eb-&gt;base_path</span><span class="c4">, path, pool);      </span></p><p class="c6 c7"><span class="c8">   </span><span class="c21">//for the buggy case,base_path=&quot;/test2”, full_path=</span><span class="c11">&quot;/test2/test1&quot;</span></p><p class="c6 c7"><span class="c21">   //for the correct case,base_path=&quot;/”,  full_path=</span><span class="c11">&quot;/test1&quot;</span></p><p class="c6 c7"><span class="c4">  /* Check PATH in our transaction.  If it does not exist,</span></p><p class="c6 c7"><span class="c4">     return a &#39;Path not present&#39; error. */</span></p><p class="c6 c7"><span class="c4">  SVN_ERR(svn_fs_check_path(&amp;kind, eb-&gt;txn_root, full_path, pool));</span></p><p class="c6 c7"><span class="c8">  if (</span><span class="c11">kind == svn_node_none</span><span class="c4">)</span></p><p class="c6 c7"><span class="c4">    return svn_error_createf(SVN_ERR_FS_NOT_DIRECTORY, NULL,</span></p><p class="c6 c7"><span class="c8">                             _(&quot;</span><span class="c11">Path &#39;%s&#39; not present</span><span class="c4">&quot;),</span></p><p class="c6 c7"><span class="c4">                             path);</span></p><p class="c6"><span class="c4">         ...</span></p><p class="c6"><span class="c4">          return SVN_NO_ERROR;</span></p><p class="c6"><span class="c4">}</span></p><p class="c0"><span class="c24"></span></p><p class="c6"><span class="c2">======================================================</span></p><p class="c6"><span class="c5">How the error value is generated</span></p><p class="c6"><span class="c5">(</span><span class="c20">The below use the first iteration of </span><span class="c38"><a class="c18" href="#id.rcemit-6nkdav"> the above for loop </a></span><span class="c20"> to show how </span><span class="c30">ra_session-&gt;priv-&gt;fs_path-&gt;data</span><span class="c20"> get infected!!)</span></p><p class="c0"><span class="c4"></span></p><p class="c6"><span class="c4">/* Append URL, and all it&#39;s non-existent parent directories, to TARGETS.</span></p><p class="c6"><span class="c4">   Use TEMPPOOL for temporary allocations and POOL for any additions to</span></p><p class="c6"><span class="c4">   TARGETS. </span></p><p class="c6"><span class="c12">   But actually, This function has the &quot;side effect&quot; to change ra_session’s                        </span></p><p class="c6"><span class="c23">   ra_session-&gt;priv-&gt;fs_path-&gt;data value !!</span></p><p class="c6"><span class="c4">*/</span></p><p class="c0"><span class="c4"></span></p><p class="c6"><span class="c4">static svn_error_t *</span></p><p class="c6"><span class="c22">add_url_parents</span><span class="c4">(svn_ra_session_t *ra_session,</span></p><p class="c6"><span class="c4">                const char *url,</span></p><p class="c6"><span class="c4">                apr_array_header_t *targets,</span></p><p class="c6"><span class="c4">                apr_pool_t *temppool,</span></p><p class="c6"><span class="c4">                apr_pool_t *pool)</span></p><p class="c6"><span class="c4">{</span></p><p class="c6"><span class="c4">  svn_node_kind_t kind;</span></p><p class="c6"><span class="c4">  const char *parent_url;</span></p><p class="c6"><span class="c9">  /*url = &quot;file:///home/yyzhou/peh003/repository/repos/test1/one/two&quot;</span></p><p class="c6"><span class="c9">    parent_url = &quot;file:///home/yyzhou/peh003/repository/repos/test1/one&quot;</span></p><p class="c6"><span class="c21">  */</span></p><p class="c6"><span class="c4">  svn_path_split(url, &amp;parent_url, NULL, pool);</span></p><p class="c6"><span class="c8">  //</span><span class="c21">ra_session-&gt;priv-&gt;fs_path-&gt;data is set to &quot;test1/one&quot;</span></p><p class="c6"><span class="c8">  SVN_ERR(</span><span class="c11">svn_ra_reparent</span><span class="c4">(ra_session, parent_url, temppool));</span></p><p class="c6"><span class="c21"> //but since </span><span class="c11">&quot;test1/one&quot;</span><span class="c21"> does not exist, after this check, it will do recursive call</span></p><p class="c6"><span class="c4">  SVN_ERR(svn_ra_check_path(ra_session, &quot;&quot;, SVN_INVALID_REVNUM, &amp;kind,</span></p><p class="c6"><span class="c4">                            temppool));</span></p><p class="c6"><span class="c8">  if (</span><span class="c11">kind == svn_node_none</span><span class="c8">) </span><span class="c21">// kind = svn_node_none</span></p><p class="c6"><span class="c23">          </span><span class="c21">//in the recursive call, ra_session-&gt;priv-&gt;fs_path-&gt;data is set to </span><span class="c11">&quot;test1”</span><span class="c21">!</span></p><p class="c6"><span class="c8">            SVN_ERR(</span><span class="c11">add_url_parents</span><span class="c4">(ra_session, parent_url, targets, temppool, pool));</span></p><p class="c6"><span class="c4">  APR_ARRAY_PUSH(targets, const char *) = url;</span></p><p class="c6"><span class="c4">  return SVN_NO_ERROR;</span></p><p class="c6"><span class="c8">}</span></p><p class="c0"><span class="c4"></span></p><p class="c6"><span class="c8">svn_error_t *</span><span class="c22">svn_ra_reparent</span><span class="c4">(svn_ra_session_t *session,</span></p><p class="c6"><span class="c4">                             const char *url,</span></p><p class="c6"><span class="c4">                             apr_pool_t *pool)</span></p><p class="c6"><span class="c4">{</span></p><p class="c6"><span class="c21">  /*first time </span><span class="c22">add_url_parents</span><span class="c21"> call it         </span><span class="c22 c37">                          </span></p><p class="c6 c10"><span class="c9">url=&quot;file:///home/yyzhou/peh003/repository/repos/test1/one&quot;</span></p><p class="c6"><span class="c9">     second time url=&quot;file:///home/yyzhou/peh003/repository/repos/test1/&quot;</span></p><p class="c6"><span class="c21">  */</span></p><p class="c6"><span class="c4">  const char *repos_root;</span></p><p class="c6"><span class="c4">  SVN_ERR(svn_ra_get_repos_root2(session, &amp;repos_root, pool));</span></p><p class="c6"><span class="c8"> </span><span class="c21">/*repos_root=“file:///home/yyzhou/peh003/repository/repos”*/</span></p><p class="c6"><span class="c4">  if (! svn_uri_is_ancestor(repos_root, url)) </span></p><p class="c6"><span class="c4">        ...</span></p><p class="c6"><span class="c8">  return </span><span class="c11">session-&gt;vtable-&gt;reparent</span><span class="c4">(session, url, pool);</span></p><p class="c6"><span class="c4">}</span></p><p class="c0"><span class="c4"></span></p><p class="c6"><span class="c4">static svn_error_t *</span></p><p class="c6"><span class="c22">svn_ra_local__reparent</span><span class="c4">(svn_ra_session_t *session,</span></p><p class="c6"><span class="c4">                       const char *url,</span></p><p class="c6"><span class="c4">                       apr_pool_t *pool)</span></p><p class="c6"><span class="c4">{</span></p><p class="c6 c7"><span class="c4">  svn_ra_local__session_baton_t *sess = session-&gt;priv;</span></p><p class="c6 c7"><span class="c4">  const char *relpath = &quot;&quot;;</span></p><p class="c6 c7"><span class="c9">  /*first time url =&quot;file:///home/yyzhou/peh003/repository/repos/test1/one&quot;  */</span></p><p class="c6 c7"><span class="c21"> /*second time url =&quot;file:///home/yyzhou/peh003/repository/repos/test1&quot;  */</span></p><p class="c6 c7"><span class="c4">  if (strcmp(url, sess-&gt;repos_url) != 0)</span></p><p class="c6 c7"><span class="c8">            </span><span class="c9">//first time relpath=&quot;test1/one&quot;</span></p><p class="c6 c7"><span class="c21">         // second time relpath=&quot;test1”</span></p><p class="c6 c7"><span class="c4">            relpath = svn_uri_is_child(sess-&gt;repos_url, url, pool);</span></p><p class="c6 c7"><span class="c4">  if (! relpath)</span></p><p class="c6 c7"><span class="c4">           …</span></p><p class="c6 c7"><span class="c4">  relpath = apr_pstrcat(pool, &quot;/&quot;, svn_path_uri_decode(relpath, pool),</span></p><p class="c6 c7"><span class="c8">                        (char *)NULL);</span></p><p class="c6 c7"><span class="c8">  </span><span class="c21">/*</span><span class="c11">sess-&gt;fs_path-&gt;data</span><span class="c21"> isset to the correct value </span><span class="c11">&quot;test1&quot; </span><span class="c9">in the second call*/</span></p><p class="c6 c7"><span class="c4">  svn_stringbuf_set(sess-&gt;fs_path, relpath);</span></p><p class="c6 c7"><span class="c4">  return SVN_NO_ERROR;</span></p><p class="c6"><span class="c4">}</span></p><p class="c0"><span class="c4"></span></p><p class="c6"><span class="c2">======================================================</span></p><p class="c6"><span class="c5">How the error value get corrected</span></p><p class="c6"><span class="c8">svn_error_t *</span><span class="c22">svn_ra_reparent</span><span class="c4">(svn_ra_session_t *session,</span></p><p class="c6"><span class="c4">                             const char *url,</span></p><p class="c6"><span class="c4">                             apr_pool_t *pool)</span></p><p class="c6"><span class="c4">{</span></p><p class="c6"><span class="c23">  </span><span class="c21">/*url=“file:///home/yyzhou/peh003/repository/repos”, i.e. repository’s root url*/</span></p><p class="c6"><span class="c4">  const char *repos_root;</span></p><p class="c6"><span class="c4">  /* Make sure the new URL is in the same repository, so that the</span></p><p class="c6"><span class="c4">     implementations don&#39;t have to do it. */</span></p><p class="c6"><span class="c4">  SVN_ERR(svn_ra_get_repos_root2(session, &amp;repos_root, pool));</span></p><p class="c6"><span class="c8">  </span><span class="c21">/*repos_root==url*/</span></p><p class="c6"><span class="c4">  if (! svn_uri_is_ancestor(repos_root, url)) </span></p><p class="c6"><span class="c4">        ...</span></p><p class="c6"><span class="c8">  return </span><span class="c11">session-&gt;vtable-&gt;reparent</span><span class="c4">(session, url, pool);</span></p><p class="c6"><span class="c4">}</span></p><p class="c6"><span class="c4">static svn_error_t *</span></p><p class="c6"><span class="c22">svn_ra_local__reparent</span><span class="c4">(svn_ra_session_t *session,</span></p><p class="c6"><span class="c4">                       const char *url,</span></p><p class="c6"><span class="c4">                       apr_pool_t *pool)</span></p><p class="c6"><span class="c4">{</span></p><p class="c6 c7"><span class="c4">  svn_ra_local__session_baton_t *sess = session-&gt;priv;</span></p><p class="c6 c7"><span class="c4">  const char *relpath = &quot;&quot;;</span></p><p class="c6 c7"><span class="c21">  /*url ==  sess-&gt;repos_url = &quot;file:///home/yyzhou/peh003/repository/repos&quot; */</span></p><p class="c6 c7"><span class="c4">  if (strcmp(url, sess-&gt;repos_url) != 0)</span></p><p class="c6 c7"><span class="c4">    relpath = svn_uri_is_child(sess-&gt;repos_url, url, pool);</span></p><p class="c6 c7"><span class="c4">  if (! relpath)</span></p><p class="c6 c7"><span class="c4">           …</span></p><p class="c6 c7"><span class="c4">  relpath = apr_pstrcat(pool, &quot;/&quot;, svn_path_uri_decode(relpath, pool),</span></p><p class="c6 c7"><span class="c8">                        (char *)NULL); </span><span class="c9">//relpath = &quot;/&quot;</span></p><p class="c6 c7"><span class="c8">  </span><span class="c21">/*</span><span class="c11">sess-&gt;fs_path-&gt;data</span><span class="c21"> is at last set to the correct value </span><span class="c11">&quot;/&quot;</span><span class="c9">*/</span></p><p class="c6 c7"><span class="c4">  svn_stringbuf_set(sess-&gt;fs_path, relpath);</span></p><p class="c6 c7"><span class="c4">  return SVN_NO_ERROR;</span></p><p class="c6"><span class="c8">}</span></p><p class="c0"><span class="c24"></span></p><p class="c6"><span class="c3">Failure symptom category</span></p><p class="c6"><span class="c25">refuse valid input/early termination</span></p><p class="c0"><span class="c24 c15"></span></p><p class="c6"><span class="c3">Is there any log message?</span></p><p class="c6"><span class="c26">Yes</span></p><p class="c0"><span class="c25"></span></p><p class="c6"><span class="c3">How can </span><span class="c27">ErrLog</span><span class="c3"> automatically insert the log message?</span></p><p class="c6"><span>return value check</span></p><p class="c0"><span class="c25"></span></p></div><div id="footer"><span>Published by <a target="_blank" title="Learn more about Google Drive" href="//docs.google.com/">Google Drive</a></span><span class="dash">&ndash;</span><a href="//docs.google.com/abuse?id=1AhH0vomf4VnzOhvQzLfnCbgIYJwrbEtCOjRK5I44pB0">Report Abuse</a><span class="dash">&ndash;</span><span>Updated automatically every 5 minutes</span></div><script type="text/javascript" nonce="7a2XA8llC55Cud68s4E/7ddjQe8">(function(){var k="undefined"!=typeof window&&window===this?this:"undefined"!=typeof global&&null!=global?global:this,aa="function"==typeof Object.create?Object.create:function(a){function b(){}b.prototype=a;return new b},ba;if("function"==typeof Object.setPrototypeOf)ba=Object.setPrototypeOf;else{var ca;a:{var da={o:!0},ea={};try{ea.__proto__=da;ca=ea.o;break a}catch(a){}ca=!1}ba=ca?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+" is not extensible");return a}:null}var fa=ba;
function m(a,b){a.prototype=aa(b.prototype);a.prototype.constructor=a;if(fa)fa(a,b);else for(var c in b)if("prototype"!=c)if(Object.defineProperties){var d=Object.getOwnPropertyDescriptor(b,c);d&&Object.defineProperty(a,c,d)}else a[c]=b[c];a.j=b.prototype}var ha="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};function ia(){ia=function(){};k.Symbol||(k.Symbol=ja)}
var ja=function(){var a=0;return function(b){return"jscomp_symbol_"+(b||"")+a++}}();function n(){ia();var a=k.Symbol.iterator;a||(a=k.Symbol.iterator=k.Symbol("iterator"));"function"!=typeof Array.prototype[a]&&ha(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return ka(this)}});n=function(){}}function ka(a){var b=0;return la(function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}})}function la(a){n();a={next:a};a[k.Symbol.iterator]=function(){return this};return a}
function ma(a){if(a){for(var b=k,c=["WeakMap"],d=0;d<c.length-1;d++){var e=c[d];e in b||(b[e]={});b=b[e]}c=c[c.length-1];d=b[c];a=a(d);a!=d&&null!=a&&ha(b,c,{configurable:!0,writable:!0,value:a})}}function p(a,b){return Object.prototype.hasOwnProperty.call(a,b)}
ma(function(a){function b(a){this.a=(f+=Math.random()+1).toString();if(a){ia();n();n();var b=a[Symbol.iterator];for(a=b?b.call(a):ka(a);!(b=a.next()).done;)b=b.value,this.set(b[0],b[1])}}function c(a){p(a,e)||ha(a,e,{value:{}})}function d(a){var b=Object[a];b&&(Object[a]=function(a){c(a);return b(a)})}if(function(){if(!a||!Object.seal)return!1;try{var b=Object.seal({}),c=Object.seal({}),d=new a([[b,2],[c,3]]);if(2!=d.get(b)||3!=d.get(c))return!1;d.delete(b);d.set(c,4);return!d.has(b)&&4==d.get(c)}catch(r){return!1}}())return a;
var e="$jscomp_hidden_"+Math.random();d("freeze");d("preventExtensions");d("seal");var f=0;b.prototype.set=function(a,b){c(a);if(!p(a,e))throw Error("WeakMap key fail: "+a);a[e][this.a]=b;return this};b.prototype.get=function(a){return p(a,e)?a[e][this.a]:void 0};b.prototype.has=function(a){return p(a,e)&&p(a[e],this.a)};b.prototype.delete=function(a){return p(a,e)&&p(a[e],this.a)?delete a[e][this.a]:!1};return b});var q=this;function na(){}
function t(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
else if("function"==b&&"undefined"==typeof a.call)return"object";return b}function oa(a){var b=typeof a;return"object"==b&&null!=a||"function"==b}function pa(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}
function qa(a,b){function c(){}c.prototype=b.prototype;a.j=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.v=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};function ra(a){ra[" "](a);return a}ra[" "]=na;function sa(a,b,c){return Object.prototype.hasOwnProperty.call(a,b)?a[b]:a[b]=c(b)};function ta(a){return sa(a.prototype,"$$generatedClassName",function(){return"Class$obf_"+{valueOf:function(){return++ua}}})}var ua=1E3;function u(){}u.prototype.g=function(){return va(this)};u.prototype.toString=function(){return v(w(y(this.constructor)))+"@"+v((this.g()>>>0).toString(16))};function z(){this.a=!1}m(z,u);z.prototype.f=function(a){return Error(a)};function wa(a,b){a.b=b;if(null!=b)try{b.__java$exception=a}catch(c){}}function xa(a){if(a.a&&"__noinit__"!==a.b){var b=null==a.c?null:a.c.replace(/\n/g,"\u200b\n");b=ya(a,b);b=a.f(b);if(!("stack"in b))try{throw b;}catch(c){}wa(a,b)}}z.prototype.toString=function(){return ya(this,this.c)};function ya(a,b){a=w(y(a.constructor));return null==b?a:v(a)+": "+v(b)};function za(){this.a=!1}m(za,z);function Aa(){this.a=!1}m(Aa,za);function va(a){return a.l||(Object.defineProperties(a,{l:{value:++Ba,enumerable:!1}}),a.l)}var Ba=0;function Ca(){this.a=!1}m(Ca,Aa);function Da(){this.a=!1}m(Da,Ca);Da.prototype.f=function(a){return new TypeError(a)};function Ea(a,b){return"string"==typeof a?a.charCodeAt(b):a.B(b)};function v(a){if(null==a)a="null";else if(a instanceof Array){var b=a.u;a=w(b?y(b.A,b.w):y(u,1))+"@"+(va(a)>>>0).toString(16)}else a=a.toString();return a}function Fa(a){if(65536<=a){var b=56320+(a-65536&1023)&65535;return v(String.fromCharCode(55296+(a-65536>>10&1023)&65535))+v(String.fromCharCode(b))}return String.fromCharCode(a&65535)}
function Ga(a,b){var c=b,d=a.length;b=Ea(a,c++);var e;if(d=55296<=b&&56319>=b&&c<d)a=e=Ea(a,c),d=56320<=a&&57343>=a;var f;d?f=65536+((b&1023)<<10)+(e&1023):f=b;return f}function Ha(a,b){return a===b||null==a&&null==b};function Ia(a,b){this.b=a;this.a=b}m(Ia,u);function w(a){var b=ta(a.b);0!=a.a&&(b="L"+v(b)+";");a=a.a;for(var c="",d=0;d<a;d++)c=v(c)+"[";return v(c)+v(b)}Ia.prototype.toString=function(){return"class "+v(w(this))};function y(a,b){var c=b||0;return sa(a.prototype,"$$class/"+c,function(){return new Ia(a,c)})};function Ja(a,b){return null==a?a:b?decodeURI(a):decodeURIComponent(a)};var Ka=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\S\s]*))?$/;function La(a){a=Ka.exec(a);for(var b=[],c=0;7>=c;c++)a.length<=c||null==a[c]?b.push(null):b.push(a[c]);return b}
function Ma(a,b){var c=Fa(35);c=a.indexOf(c);c=0>c?a.length:c;a:{var d=0;for(var e=b.length;0<(d=a.indexOf(b,d))&&d<c;){var f=Ga(a,d-1);if(38==f||63==f){if(d+e>=a.length)break a;f=Ga(a,d+e);if(61==f||38==f||35==f)break a}d+=e+1}d=-1}if(0>d)return null;e=d;f=Fa(38);e=a.indexOf(f,e);if(0>e||e>c)e=c;d+=b.length+1;b=Math.min(a.length,d);a=a.substr(b,Math.min(a.length,Math.max(d,e))-b);c=" ";for(b=0;0<=(b=c.indexOf("\\",b));)36==c.charCodeAt(b+1)?(d=v(c.substr(0,b))+"$",e=++b,c=d+v(c.substr(e))):(d=v(c.substr(0,
b)),e=++b,c=d+v(c.substr(e)));a=a.replace(/\+/g,c);return Ja(a,!1)};var Na=String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]},Oa=/&/g,Pa=/</g,Qa=/>/g,Ra=/"/g,Sa=/'/g,Ta=/\x00/g,Ua=/[\x00&<>"']/;function Va(a,b){return a<b?-1:a>b?1:0};var Wa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if("string"==typeof a)return"string"==typeof b&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};function A(a,b){this.a=[];this.b=b;for(var c=!0,d=a.length-1;0<=d;d--){var e=a[d]|0;c&&e==b||(this.a[d]=e,c=!1)}}var Xa={};function B(a){if(-128<=a&&128>a){var b=Xa[a];if(b)return b}b=new A([a|0],0>a?-1:0);-128<=a&&128>a&&(Xa[a]=b);return b}function C(a){if(isNaN(a)||!isFinite(a))return D;if(0>a)return E(C(-a));for(var b=[],c=1,d=0;a>=c;d++)b[d]=a/c|0,c*=4294967296;return new A(b,0)}var D=B(0),F=B(1),Ya=B(16777216);
function G(a){if(-1==a.b)return-G(E(a));for(var b=0,c=1,d=0;d<a.a.length;d++){var e=H(a,d);b+=(0<=e?e:4294967296+e)*c;c*=4294967296}return b}A.prototype.toString=function(a){a=a||10;if(2>a||36<a)throw Error("radix out of range: "+a);if(I(this))return"0";if(-1==this.b)return"-"+E(this).toString(a);for(var b=C(Math.pow(a,6)),c=this,d="";;){var e=Za(c,b);c=J(c,K(e,b));var f=((0<c.a.length?c.a[0]:c.b)>>>0).toString(a);c=e;if(I(c))return f+d;for(;6>f.length;)f="0"+f;d=f+d}};
function H(a,b){return 0>b?0:b<a.a.length?a.a[b]:a.b}function I(a){if(0!=a.b)return!1;for(var b=0;b<a.a.length;b++)if(0!=a.a[b])return!1;return!0}function L(a,b){a=J(a,b);return-1==a.b?-1:I(a)?0:1}function E(a){for(var b=a.a.length,c=[],d=0;d<b;d++)c[d]=~a.a[d];return(new A(c,~a.b)).add(F)}
A.prototype.add=function(a){for(var b=Math.max(this.a.length,a.a.length),c=[],d=0,e=0;e<=b;e++){var f=d+(H(this,e)&65535)+(H(a,e)&65535),g=(f>>>16)+(H(this,e)>>>16)+(H(a,e)>>>16);d=g>>>16;f&=65535;g&=65535;c[e]=g<<16|f}return new A(c,c[c.length-1]&-2147483648?-1:0)};function J(a,b){return a.add(E(b))}
function K(a,b){if(I(a)||I(b))return D;if(-1==a.b)return-1==b.b?K(E(a),E(b)):E(K(E(a),b));if(-1==b.b)return E(K(a,E(b)));if(0>L(a,Ya)&&0>L(b,Ya))return C(G(a)*G(b));for(var c=a.a.length+b.a.length,d=[],e=0;e<2*c;e++)d[e]=0;for(e=0;e<a.a.length;e++)for(var f=0;f<b.a.length;f++){var g=H(a,e)>>>16,h=H(a,e)&65535,l=H(b,f)>>>16,r=H(b,f)&65535;d[2*e+2*f]+=h*r;$a(d,2*e+2*f);d[2*e+2*f+1]+=g*r;$a(d,2*e+2*f+1);d[2*e+2*f+1]+=h*l;$a(d,2*e+2*f+1);d[2*e+2*f+2]+=g*l;$a(d,2*e+2*f+2)}for(e=0;e<c;e++)d[e]=d[2*e+1]<<
16|d[2*e];for(e=c;e<2*c;e++)d[e]=0;return new A(d,0)}function $a(a,b){for(;(a[b]&65535)!=a[b];)a[b+1]+=a[b]>>>16,a[b]&=65535,b++}
function Za(a,b){if(I(b))throw Error("division by zero");if(I(a))return D;if(-1==a.b)return-1==b.b?Za(E(a),E(b)):E(Za(E(a),b));if(-1==b.b)return E(Za(a,E(b)));if(30<a.a.length){if(-1==a.b||-1==b.b)throw Error("slowDivide_ only works with positive integers.");for(var c=F;0>=L(b,a);)c=ab(c,1),b=ab(b,1);var d=M(c,1),e=M(b,1);b=M(b,2);for(c=M(c,2);!I(b);){var f=e.add(b);0>=L(f,a)&&(d=d.add(c),e=f);b=M(b,1);c=M(c,1)}return d}for(c=D;0<=L(a,b);){d=Math.max(1,Math.floor(G(a)/G(b)));e=Math.ceil(Math.log(d)/
Math.LN2);e=48>=e?1:Math.pow(2,e-48);f=C(d);for(var g=K(f,b);-1==g.b||0<L(g,a);)d-=e,f=C(d),g=K(f,b);I(f)&&(f=F);c=c.add(f);a=J(a,g)}return c}A.prototype.and=function(a){for(var b=Math.max(this.a.length,a.a.length),c=[],d=0;d<b;d++)c[d]=H(this,d)&H(a,d);return new A(c,this.b&a.b)};A.prototype.or=function(a){for(var b=Math.max(this.a.length,a.a.length),c=[],d=0;d<b;d++)c[d]=H(this,d)|H(a,d);return new A(c,this.b|a.b)};
A.prototype.xor=function(a){for(var b=Math.max(this.a.length,a.a.length),c=[],d=0;d<b;d++)c[d]=H(this,d)^H(a,d);return new A(c,this.b^a.b)};function ab(a,b){var c=b>>5;b%=32;for(var d=a.a.length+c+(0<b?1:0),e=[],f=0;f<d;f++)e[f]=0<b?H(a,f-c)<<b|H(a,f-c-1)>>>32-b:H(a,f-c);return new A(e,a.b)}function M(a,b){var c=b>>5;b%=32;for(var d=a.a.length-c,e=[],f=0;f<d;f++)e[f]=0<b?H(a,f+c)>>>b|H(a,f+c+1)<<32-b:H(a,f+c);return new A(e,a.b)};function bb(a,b,c){for(var d in a)b.call(c,a[d],d,a)};J(ab(F,32),F);B(65535);J(ab(F,128),F);var N;a:{var cb=q.navigator;if(cb){var db=cb.userAgent;if(db){N=db;break a}}N=""}function O(a){return-1!=N.indexOf(a)};var eb=O("Opera"),P=O("Trident")||O("MSIE"),fb=O("Edge"),gb=fb||P,hb=O("Gecko")&&!(-1!=N.toLowerCase().indexOf("webkit")&&!O("Edge"))&&!(O("Trident")||O("MSIE"))&&!O("Edge"),ib=-1!=N.toLowerCase().indexOf("webkit")&&!O("Edge"),jb=O("Macintosh");function kb(){var a=q.document;return a?a.documentMode:void 0}var lb;
a:{var mb="",nb=function(){var a=N;if(hb)return/rv:([^\);]+)(\)|;)/.exec(a);if(fb)return/Edge\/([\d\.]+)/.exec(a);if(P)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(ib)return/WebKit\/(\S+)/.exec(a);if(eb)return/(?:Version)[ \/]?(\S+)/.exec(a)}();nb&&(mb=nb?nb[1]:"");if(P){var ob=kb();if(null!=ob&&ob>parseFloat(mb)){lb=String(ob);break a}}lb=mb}var pb=lb,qb={},rb;var sb=q.document;rb=sb&&P?kb()||("CSS1Compat"==sb.compatMode?parseInt(pb,10):5):void 0;function Q(){this.b=this.b;this.a=this.a}Q.prototype.b=!1;Q.prototype.m=function(){this.b||(this.b=!0,this.f())};Q.prototype.f=function(){if(this.a)for(;this.a.length;)this.a.shift()()};function tb(a){a&&"function"==typeof a.m&&a.m()};function T(){this.b="";this.f=ub}T.prototype.c=!0;T.prototype.a=function(){return this.b};function wb(a){if(a instanceof T&&a.constructor===T&&a.f===ub)return a.b;t(a);return"type_error:SafeUrl"}var xb=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i,ub={};function yb(a){var b=new T;b.b=a;return b};function U(){this.b="";this.f=zb}U.prototype.c=!0;U.prototype.a=function(){return this.b};function Ab(a){if(a instanceof U&&a.constructor===U&&a.f===zb)return a.b;t(a);return"type_error:SafeHtml"}var zb={};var Bb=!P||9<=Number(rb),Cb=!P||9<=Number(rb),Db=P&&!sa(qb,"9",function(){for(var a=0,b=Na(String(pb)).split("."),c=Na("9").split("."),d=Math.max(b.length,c.length),e=0;0==a&&e<d;e++){var f=b[e]||"",g=c[e]||"";do{f=/(\d*)(\D*)(.*)/.exec(f)||["","","",""];g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];if(0==f[0].length&&0==g[0].length)break;a=Va(0==f[1].length?0:parseInt(f[1],10),0==g[1].length?0:parseInt(g[1],10))||Va(0==f[2].length,0==g[2].length)||Va(f[2],g[2]);f=f[3];g=g[3]}while(0==a)}return 0<=a}),
Eb=function(){if(!q.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0}});try{q.addEventListener("test",na,b),q.removeEventListener("test",na,b)}catch(c){}return a}();function Fb(a,b){this.type=a;this.a=this.target=b;this.f=!1}Fb.prototype.c=function(){this.f=!0};function V(a,b){Fb.call(this,a?a.type:"");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.b=null;if(a){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(hb){a:{try{ra(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else"mouseover"==c?b=
a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
a.metaKey;this.pointerId=a.pointerId||0;this.pointerType="string"==typeof a.pointerType?a.pointerType:Gb[a.pointerType]||"";this.b=a;a.defaultPrevented&&this.c()}}qa(V,Fb);var Hb=[1,4,2],Gb={2:"touch",3:"pen",4:"mouse"};V.prototype.c=function(){V.j.c.call(this);var a=this.b;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Db)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};var Ib="closure_listenable_"+(1E6*Math.random()|0),Jb=0;function Kb(a,b,c,d,e){this.listener=a;this.a=null;this.src=b;this.type=c;this.capture=!!d;this.b=e;this.key=++Jb;this.h=this.i=!1}function Lb(a){a.h=!0;a.listener=null;a.a=null;a.src=null;a.b=null};function Mb(a){this.src=a;this.a={};this.b=0}Mb.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var g;a:{for(g=0;g<a.length;++g){var h=a[g];if(!h.h&&h.listener==b&&h.capture==!!d&&h.b==e)break a}g=-1}-1<g?(b=a[g],c||(b.i=!1)):(b=new Kb(b,this.src,f,!!d,e),b.i=c,a.push(b));return b};var Nb="closure_lm_"+(1E6*Math.random()|0),Ob={},Pb=0;function Qb(a,b,c,d,e){if(d&&d.once)return Rb(a,b,c,d,e);if("array"==t(b)){for(var f=0;f<b.length;f++)Qb(a,b[f],c,d,e);return null}c=Sb(c);return a&&a[Ib]?a.a(b,c,oa(d)?!!d.capture:!!d,e):Tb(a,b,c,!1,d,e)}
function Tb(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var g=oa(e)?!!e.capture:!!e,h=Ub(a);h||(a[Nb]=h=new Mb(a));c=h.add(b,c,d,g,f);if(c.a)return c;d=Vb();c.a=d;d.src=a;d.listener=c;if(a.addEventListener)Eb||(e=g),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(Wb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");Pb++;return c}
function Vb(){var a=Xb,b=Cb?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function Rb(a,b,c,d,e){if("array"==t(b)){for(var f=0;f<b.length;f++)Rb(a,b[f],c,d,e);return null}c=Sb(c);return a&&a[Ib]?a.b(b,c,oa(d)?!!d.capture:!!d,e):Tb(a,b,c,!0,d,e)}
function Yb(a){if("number"!=typeof a&&a&&!a.h){var b=a.src;if(b&&b[Ib])b.c(a);else{var c=a.type,d=a.a;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(Wb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);Pb--;if(c=Ub(b)){d=a.type;if(d in c.a){var e=c.a[d],f=Wa(e,a),g;(g=0<=f)&&Array.prototype.splice.call(e,f,1);g&&(Lb(a),0==c.a[d].length&&(delete c.a[d],c.b--))}0==c.b&&(c.src=null,b[Nb]=null)}else Lb(a)}}}
function Wb(a){return a in Ob?Ob[a]:Ob[a]="on"+a}function Zb(a,b,c,d){var e=!0;if(a=Ub(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.h&&(f=$b(f,d),e=e&&!1!==f)}return e}function $b(a,b){var c=a.listener,d=a.b||a.src;a.i&&Yb(a);return c.call(d,b)}
function Xb(a,b){if(a.h)return!0;if(!Cb){if(!b)a:{b=["window","event"];for(var c=q,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c}d=b;b=new V(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(g){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.a;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.a=d[e];var f=Zb(d[e],a,!0,b);c=c&&f}for(e=0;e<d.length;e++)b.a=d[e],f=Zb(d[e],a,!1,b),c=c&&f}return c}return $b(a,
new V(b,this))}function Ub(a){a=a[Nb];return a instanceof Mb?a:null}var ac="__closure_events_fn_"+(1E9*Math.random()>>>0);function Sb(a){if("function"==t(a))return a;a[ac]||(a[ac]=function(b){return a.handleEvent(b)});return a[ac]};function W(a){Q.call(this);this.g=a;this.c={}}qa(W,Q);var bc=[];function cc(a){bb(a.c,function(a,c){this.c.hasOwnProperty(c)&&Yb(a)},a);a.c={}}W.prototype.f=function(){W.j.f.call(this);cc(this)};W.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented");};function dc(a){Q.call(this);this.c=a||document.body;this.g=new W(this);a=pa(tb,this.g);this.b?a():(this.a||(this.a=[]),this.a.push(a));a=this.g;var b=this.c,c=this.s,d="click";"array"!=t(d)&&(d&&(bc[0]=d.toString()),d=bc);for(var e=0;e<d.length;e++){var f=Qb(b,d[e],c||a.handleEvent,!1,a.g||a);if(!f)break;a.c[f.key]=f}}qa(dc,Q);
dc.prototype.s=function(a){if((Bb?0==a.b.button:"click"==a.type||a.b.button&Hb[0])&&!(ib&&jb&&a.ctrlKey)&&!a.f)for(var b=a.target;b&&b!=this.c;){if(b.tagName&&"a"==b.tagName.toLowerCase()){var c=b.getAttribute("href")||b.getAttributeNS("http://www.w3.org/1999/xlink","href"),d=c;var e=d;try{var f=void 0,g=La(d)[3];f=null==g?null:g;var h=Ja(f,!0);var l;if(l=Ha("www.google.com",h)){var r=La(d)[5];l=Ha("/url",Ja(r,!0))}if(l){var vb=Ma(d,"q");e=vb?vb:Ma(d,"url")}}catch(R){a:{d=R;if(null!=d&&(f=d.__java$exception,
null!=f)){R=f;break a}if(d instanceof TypeError){var x=f=new Da,S=x;S.a=!0;S.b="__noinit__";xa(x);wa(x,d);x.c=v(d);d=f}else S=x=f=new Ca,S.a=!0,S.b="__noinit__",xa(x),wa(x,d),x.c=v(d),d=f;R=d}if(!(R instanceof za))throw R.b;}e=null!=e?e:"";if(c!=e){l=void 0;g=e;b={target:"_blank",noreferrer:!0};c=window;g instanceof T?h=g:(h="undefined"!=typeof g.href?g.href:String(g),h instanceof T||(h="object"==typeof h&&h.c?h.a():String(h),xb.test(h)||(h="about:invalid#zClosurez"),h=yb(h)));g=b.target||g.target;
r=[];for(l in b)switch(l){case "width":case "height":case "top":case "left":r.push(l+"="+b[l]);break;case "target":case "noopener":case "noreferrer":break;default:r.push(l+"="+(b[l]?1:0))}l=r.join(",");(O("iPhone")&&!O("iPod")&&!O("iPad")||O("iPad")||O("iPod"))&&c.navigator&&c.navigator.standalone&&g&&"_self"!=g?(r=l=c.document.createElement("A"),h instanceof T||h instanceof T||(h="object"==typeof h&&h.c?h.a():String(h),xb.test(h)||(h="about:invalid#zClosurez"),h=yb(h)),r.href=wb(h),l.setAttribute("target",
g),b.noreferrer&&l.setAttribute("rel","noreferrer"),b=document.createEvent("MouseEvent"),b.initMouseEvent("click",!0,!0,c,1),l.dispatchEvent(b)):b.noreferrer?(c=c.open("",g,l),b=wb(h),c&&(gb&&-1!=b.indexOf(";")&&(b="'"+b.replace(/'/g,"%27")+"'"),c.opener=null,Ua.test(b)&&(-1!=b.indexOf("&")&&(b=b.replace(Oa,"&amp;")),-1!=b.indexOf("<")&&(b=b.replace(Pa,"&lt;")),-1!=b.indexOf(">")&&(b=b.replace(Qa,"&gt;")),-1!=b.indexOf('"')&&(b=b.replace(Ra,"&quot;")),-1!=b.indexOf("'")&&(b=b.replace(Sa,"&#39;")),
-1!=b.indexOf("\x00")&&(b=b.replace(Ta,"&#0;"))),h=new U,h.b='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+b+'">',c.document.write(Ab(h)),c.document.close())):(c=c.open(wb(h),g,l))&&b.noopener&&(c.opener=null);a.c();break}}b=b.parentNode}};function ec(a){new dc(a)}var X=["DOCS_installLinkReferrerSanitizer"],Y=q;X[0]in Y||"undefined"==typeof Y.execScript||Y.execScript("var "+X[0]);
for(var Z;X.length&&(Z=X.shift());)X.length||void 0===ec?Y[Z]&&Y[Z]!==Object.prototype[Z]?Y=Y[Z]:Y=Y[Z]={}:Y[Z]=ec;}).call(this);
</script><script type="text/javascript" nonce="7a2XA8llC55Cud68s4E/7ddjQe8">DOCS_installLinkReferrerSanitizer();</script></body></html>